SVN-fs-dump-format-version: 2

UUID: cd132af1-fa9a-40a2-81ef-6edf1855a003

Revision-number: 0
Prop-content-length: 56
Content-length: 56

K 8
svn:date
V 27
2012-08-26T09:24:32.758323Z
PROPS-END

Revision-number: 1
Prop-content-length: 227
Content-length: 227

K 7
svn:log
V 123
Automatically created readme.textile and /trunk, /branches, /tags directories. We recommend you to put all your code there.
K 10
svn:author
V 8
www-data
K 8
svn:date
V 27
2012-11-28T14:21:38.539719Z
PROPS-END

Node-path: branches
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: readme.textile
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 340
Text-content-md5: b9e5c704ae810d7df16b6f2778a6d1cb
Text-content-sha1: e40a66d2e007fe826eddc14c50b91dc6278cf8dc
Content-length: 350

PROPS-END
h1. Assembla.readme

In assembla you can use "textile(Textile Basics)":http://bit.ly/textile-basics, "html(Html Basics)":http://bit.ly/html-basics or "markdown(Markdown Basics)":http://bit.ly/markdown-basics to add some sugar to your readme files. Just add the extention to your readme file, so we can recognize the markup you want to use!


Node-path: tags
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: trunk
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Revision-number: 2
Prop-content-length: 189
Content-length: 189

K 7
svn:log
V 80
Share project "WikiWeb" into "https://subversion.assembla.com/svn/wikiweb/trunk"
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-05-20T17:22:48.337948Z
PROPS-END

Node-path: trunk/WikiWeb
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Revision-number: 3
Prop-content-length: 122
Content-length: 122

K 7
svn:log
V 13
InitialCommit
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-05-20T17:23:30.875973Z
PROPS-END

Node-path: trunk/WikiWeb/.classpath
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 301
Text-content-md5: 52066c574fbd09ed317a73ebe8ef2d0b
Text-content-sha1: b871a406b31b850f5e1d7251f9c8e368fe6972be
Content-length: 346

K 13
svn:mime-type
V 10
text/plain
PROPS-END
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
	<classpathentry kind="output" path="bin"/>
</classpath>


Node-path: trunk/WikiWeb/.project
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 383
Text-content-md5: 8abca4281845c5bab804ba6a937ad1b7
Text-content-sha1: 5c0fbfd78d09eb0ab46f5241e3a88bc53236609e
Content-length: 428

K 13
svn:mime-type
V 10
text/plain
PROPS-END
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>WikiWeb</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>org.eclipse.jdt.core.javabuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>org.eclipse.jdt.core.javanature</nature>
	</natures>
</projectDescription>


Node-path: trunk/WikiWeb/.settings
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: trunk/WikiWeb/.settings/org.eclipse.jdt.core.prefs
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 598
Text-content-md5: ef561c8a6f314527ba85565c7b496f01
Text-content-sha1: af7fe7fb2d26f84718d29a6c151fe0b5395a6b9b
Content-length: 643

K 13
svn:mime-type
V 10
text/plain
PROPS-END
eclipse.preferences.version=1
org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
org.eclipse.jdt.core.compiler.compliance=1.6
org.eclipse.jdt.core.compiler.debug.lineNumber=generate
org.eclipse.jdt.core.compiler.debug.localVariable=generate
org.eclipse.jdt.core.compiler.debug.sourceFile=generate
org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
org.eclipse.jdt.core.compiler.source=1.6


Node-path: trunk/WikiWeb/src
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Revision-number: 4
Prop-content-length: 119
Content-length: 119

K 7
svn:log
V 10
Helloworld
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-05-20T17:25:26.514825Z
PROPS-END

Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 115
Text-content-md5: 773c7325c604bd7ea568dc1e2176f009
Text-content-sha1: eef635dd3281c5dc22fb389661c363f8444c2a66
Content-length: 160

K 13
svn:mime-type
V 10
text/plain
PROPS-END

public class Runner {
	public static void main(String args[]) {
		System.out.println("Hello world");
	}

}


Revision-number: 5
Prop-content-length: 114
Content-length: 114

K 7
svn:log
V 6
Frame

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-05-20T17:27:14.890647Z
PROPS-END

Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 222
Text-content-md5: bd59a4b331bee6ca50340d8209fe770a
Text-content-sha1: 941c0df17fe0813612d4b82e88315925e20e1e8d
Content-length: 222

import javax.swing.JFrame;

public class Runner extends JFrame {
	
	public Runner() {
		this.setSize(1000, 1000);
		this.setVisible(true);
	}
	
	public static void main(String args[]) {
		new Runner();
	}

}


Revision-number: 6
Prop-content-length: 108
Content-length: 108

K 7
svn:log
V 0

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-05-21T17:30:30.844777Z
PROPS-END

Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 1060
Text-content-md5: b6842c1374f06bc0cd9bee5c69ec56cb
Text-content-sha1: 537ded0a547daa2e71a85ca90cbf369a0efca369
Content-length: 1060

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import javax.swing.JFrame;

public class Runner extends JFrame {

	public Runner() {
		this.setSize(1000, 1000);
		this.setVisible(true);
	}

	public static void main(String args[]) throws IOException {
		URL wiki = new URL("http://en.wikipedia.org/wiki/Computer_science");
		URLConnection url = wiki.openConnection();
		BufferedReader in = new BufferedReader(new InputStreamReader(
				url.getInputStream()));
		
		String now;
		ArrayList<String> lines = new ArrayList<String>();
		ArrayList<String> links = new ArrayList<String>();
		while ((now = in.readLine()) != null) {
			if (now.contains("href="+"\""+ "/wiki/")) {
				lines.add(now);
			}
		}
		for (int i = 0; i < 10; i++) {
			getLinks(lines.get(i));
			
		}
		
	}
	
	public static ArrayList<String> getLinks(String str) {
	for (str.split("<a href=\"/wiki/"));
		return null;
	}

}


Revision-number: 7
Prop-content-length: 133
Content-length: 133

K 7
svn:log
V 24
Working proof of concept
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-05-22T16:59:13.256045Z
PROPS-END

Node-path: trunk/WikiWeb/src/RelaventLinks.java
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 40
Text-content-md5: 2494d69f969cb5a0e381cf7bc1ea9a1a
Text-content-sha1: ee983d1d2ab45e003bad984c71f18e4317bf726f
Content-length: 85

K 13
svn:mime-type
V 10
text/plain
PROPS-END

public class RelaventLinks {

	
}


Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 1104
Text-content-md5: e37a040b13dcc63042427bbdf35cf2b2
Text-content-sha1: 1159060aef6a2de45b76bb2251b7b13cfdc067c0
Content-length: 1104

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import javax.swing.JFrame;

public class Runner extends JFrame {

	public Runner() {
		this.setSize(1000, 1000);
		this.setVisible(true);
	}

	public static void main(String args[]) throws IOException {
		URL wiki = new URL("http://en.wikipedia.org/wiki/Computer_science");
		URLConnection url = wiki.openConnection();
		BufferedReader in = new BufferedReader(new InputStreamReader(
				url.getInputStream()));
		
		String now;
		ArrayList<String> lines = new ArrayList<String>();
		ArrayList<String> links = new ArrayList<String>();
		while ((now = in.readLine()) != null) {
			if (now.contains("href="+"\""+ "/wiki/")) {
				lines.add(now);
			}
		}
		
		getLinks(lines.get(1));
	}
	
	public static ArrayList<String> getLinks(String str) {
		String[] ar = str.split("href="+"\""+ "/wiki/");
		for (int i = 0; i < ar.length; i++) {
			System.out.println(ar[i]);
		}
		return null;
	}

}


Revision-number: 8
Prop-content-length: 122
Content-length: 122

K 7
svn:log
V 13
Creating DAOs
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-05-22T17:13:18.845354Z
PROPS-END

Node-path: trunk/WikiWeb/src/Wikipedia.java
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 519
Text-content-md5: 8f4402ebef5dbe4f67b07096c8d03b36
Text-content-sha1: 084902216aa8c219a98b89f5da420f6c0de2f63a
Content-length: 564

K 13
svn:mime-type
V 10
text/plain
PROPS-END
import java.net.URL;

public class Wikipedia {

	private String pageTitle;
	private URL url;

	/**
	 * 
	 * @param url - URL for that page, maybe for a future query or visiting the page
	 * @param pageTitle - The title associated with that page
	 */
	public Wikipedia(URL url, String pageTitle) {
		this.url = url;
		this.pageTitle = pageTitle;
	}
	
	public String getTitle() {
		return pageTitle;
	}
	
	@Override
	public String toString() {
		return pageTitle + " @ :" + url.toString();
	}
}


Revision-number: 9
Prop-content-length: 108
Content-length: 108

K 7
svn:log
V 0

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-05-22T17:29:56.501532Z
PROPS-END

Node-path: trunk/WikiWeb/src/RelaventLinks.java
Node-kind: file
Node-action: change
Text-content-length: 1305
Text-content-md5: 6cc4372c19230928c96624d3855826f2
Text-content-sha1: 3fdb12d5400311e76f36ab8151a559efd0680fe4
Content-length: 1305

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelaventLinks {

	private BufferedReader allHtml;
	private ArrayList<Wikipedia> relaventLinks = null;

	public RelaventLinks(URL url) {
		try {
			URLConnection con = url.openConnection();
			allHtml = new BufferedReader(new InputStreamReader(
					con.getInputStream()));
			String now;
			ArrayList<String> lines = new ArrayList<String>();

			ArrayList<String> a = new ArrayList<String>();

			while ((now = allHtml.readLine()) != null) {
				a = getLinks(now);
				for (int i = 0; i < a.size(); i++) {
					lines.add(a.get(i));
					System.out.println(lines.get(i));
				}
			}

		} catch (IOException e) {
			System.exit(0);
		}
	}

	public BufferedReader getHtml() {
		return allHtml;
	}

	/**
	 * 
	 * @param link
	 *            -line of html
	 * @return all the Wikipedia pages href'd on that line
	 */
	public static ArrayList<String> getLinks(String str) {
		ArrayList<String> s = new ArrayList<String>();
		String[] ar = str.split("href=" + "\"" + "/wiki/");
		for (int i = 0; i < ar.length; i++) {
			System.out.println(ar[i]);
		}
		return null;
	}
}


Revision-number: 10
Prop-content-length: 126
Content-length: 126

K 7
svn:log
V 17
Logic is working

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-04T17:27:42.942429Z
PROPS-END

Node-path: trunk/WikiWeb/src/RelaventLinks.java
Node-kind: file
Node-action: change
Text-content-length: 1431
Text-content-md5: 9c644656a341789cdf7073e3d14c8f55
Text-content-sha1: cebf81ae466fca5e4e9e74b2902ebfd9a44b0093
Content-length: 1431

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelaventLinks {

	private BufferedReader allHtml;
	private ArrayList<Wikipedia> relaventLinks = null;

	public RelaventLinks(URL url) {
		try {
			URLConnection con = url.openConnection();
			allHtml = new BufferedReader(new InputStreamReader(
					con.getInputStream()));
			String now;
			ArrayList<String> lines = new ArrayList<String>();

			ArrayList<String> a = null;
			while ((now = allHtml.readLine()) != null) {
				a = getLinks(now);
				
				if (a != null)
					for (int i = 0; i < a.size(); i++) {
						lines.add(a.get(i));
					}
			}
						
			for (int i = 0; i < 100; i++) {
				System.out.println(lines.get(i));
			}

		} catch (IOException e) {
			System.out.println("Exception");
		}
	}

	public BufferedReader getHtml() {
		return allHtml;
	}

	/**
	 * 
	 * @param link
	 *            -line of html
	 * @return all the Wikipedia pages href'd on that line
	 */
	public static ArrayList<String> getLinks(String str) {
		if (!str.contains("href=" + "\"" + "/wiki/"))
			return null;

		ArrayList<String> s = new ArrayList<String>();
		String[] ar = str.split("href=" + "\"" + "/wiki/");
		for (int i = 1; i < ar.length; i++) {
			s.add(ar[i]);
		}
		return s;
	}
}


Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 2146
Text-content-md5: 7c4d815d1e5ac325a1cd249b2a5c215f
Text-content-sha1: e3083c6eb375bd48bfcc52be4f17f4c5d3771209
Content-length: 2146

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import javax.swing.JFrame;

public class Runner extends JFrame {

	public Runner() {
		this.setSize(1000, 1000);
		this.setVisible(true);
	}
	
	public static void main(String args[]) throws MalformedURLException {
		new RelaventLinks(new URL("http://en.wikipedia.org/wiki/Computer_science"));
//		String jaaaa = "<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p><b>Computer science</b> or <b>computing science</b> (abbreviated <b>CS</b> or <b>CompSci</b>) is the <a href=\"/wiki/Science\" title=\"Science\">scientific</a> and practical approach to <a href=\"/wiki/Computation\" title=\"Computation\">computation</a> and its applications. A <a href=\"/wiki/Computer_scientist\" title=\"Computer scientist\">computer scientist</a> specializes in the theory of computation and the design of computational systems.<sup id=\"cite_ref-1\" class=\"reference\"><a href=\"#cite_note-1\"><span>[</span>1<span>]</span></a></sup></p>";
//		for (int i = 0; i < RelaventLinks.getLinks(jaaaa).size(); i++) {
//			System.out.println(RelaventLinks.getLinks(jaaaa).get(i));
//		}
	}
	
//
//	public static void main(String args[]) throws IOException {
//		URL wiki = new URL("http://en.wikipedia.org/wiki/Computer_science");
//		URLConnection url = wiki.openConnection();
//		BufferedReader in = new BufferedReader(new InputStreamReader(
//				url.getInputStream()));
//		
//		String now;
//		ArrayList<String> lines = new ArrayList<String>();
//		ArrayList<String> links = new ArrayList<String>();
//		while ((now = in.readLine()) != null) {
//			if (now.contains("href="+"\""+ "/wiki/")) {
//				lines.add(now);
//			}
//		}
//		
//		getLinks(lines.get(1));
//	}
	
	public static ArrayList<String> getLinks(String str) {
		String[] ar = str.split("href="+"\""+ "/wiki/");
		for (int i = 0; i < ar.length; i++) {
			System.out.println(ar[i]);
		}
		return null;
	}

}


Revision-number: 11
Prop-content-length: 113
Content-length: 113

K 7
svn:log
V 5
Idea

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-05T17:30:38.936234Z
PROPS-END

Node-path: trunk/WikiWeb/src/Idea
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 182
Text-content-md5: d64c36c95703375b51d4c1b8004b3220
Text-content-sha1: 3c3257aff79de54b558ed2316d33c32caa843812
Content-length: 192

PROPS-END
Sort by: Page Counts
Sort by: # of times that it appears on page
Add support for things other than text
Start your gui
Use the dump to index the search
Bold or "" things on page

Node-path: trunk/WikiWeb/src/RelaventLinks.java
Node-kind: file
Node-action: change
Text-content-length: 1591
Text-content-md5: e21a773de61ce79a1555e8941c1579b2
Text-content-sha1: c187f8795fda4043033f9302cf6d6f606185c072
Content-length: 1591

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelaventLinks {

	private BufferedReader allHtml;
	private ArrayList<Wikipedia> relaventLinks = null;

	public RelaventLinks(URL url) {
		try {
			URLConnection con = url.openConnection();
			allHtml = new BufferedReader(new InputStreamReader(
					con.getInputStream()));
			String now;
			ArrayList<String> lines = new ArrayList<String>();

			ArrayList<String> a = null;
			while ((now = allHtml.readLine()) != null) {
				a = getLinks(now);
				
				if (a != null)
					for (int i = 0; i < a.size(); i++) {
						lines.add(a.get(i));
					}
			}
						
			for (int i = 0; i < lines.size(); i++) {
				System.out.println(lines.get(i));
				try {
					Thread.sleep(500);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} catch (IOException e) {
			System.out.println("Exception");
		}
	}

	public BufferedReader getHtml() {
		return allHtml;
	}

	/**
	 * 
	 * @param link
	 *            -line of html
	 * @return all the Wikipedia pages href'd on that line
	 */
	public static ArrayList<String> getLinks(String str) {
		if (!str.contains("href=" + "\"" + "/wiki/"))
			return null;

		ArrayList<String> s = new ArrayList<String>();
		String[] ar = str.split("href=" + "\"" + "/wiki/");
		for (int i = 1; i < ar.length; i++) {
			s.add(ar[i]);
		}
		return s;
	}
}


Revision-number: 12
Prop-content-length: 128
Content-length: 128

K 7
svn:log
V 19
Improving structure
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-06T17:24:37.849245Z
PROPS-END

Node-path: trunk/WikiWeb/src/ParentWikipedia.java
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 245
Text-content-md5: f985fd29c18ea0c13cab463aa97fba73
Text-content-sha1: 91adc7ddacd10524f1e9fd2ee1fc202fe58401a3
Content-length: 290

K 13
svn:mime-type
V 10
text/plain
PROPS-END
import java.net.URL;

public class ParentWikipedia extends Wikipedia {

	private RelaventLinks relaventLinks;
	
	public ParentWikipedia(String pageTitle) {
		super(pageTitle);
		relaventLinks = new RelaventLinks(super.getURL());
	}
}


Node-path: trunk/WikiWeb/src/RelaventLinks.java
Node-kind: file
Node-action: change
Text-content-length: 1381
Text-content-md5: 76898eaad871bf026cd61368e9807ca3
Text-content-sha1: 43549d12a44a0b07135befe1986f0f1d91fab1d9
Content-length: 1381

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelaventLinks {

	private BufferedReader allHtml;
	private ArrayList<Wikipedia> relaventLinks = null;

	public RelaventLinks(URL url) {
		try {
			URLConnection con = url.openConnection();
			allHtml = new BufferedReader(new InputStreamReader(
					con.getInputStream()));
			String now;
			ArrayList<String> lines = new ArrayList<String>();

			ArrayList<String> a = null;
			while ((now = allHtml.readLine()) != null) {
				a = getLinks(now);
				
				if (a != null)
					for (int i = 0; i < a.size(); i++) {
						lines.add(a.get(i));
					}
			}
						
			for (int i = 0; i < lines.size(); i++) {
				System.out.println(lines.get(i));
			}

		} catch (IOException e) {
			System.out.println("Exception");
		}
	}
	
	/**
	 * 
	 * @param link
	 *            -line of html
	 * @return all the Wikipedia pages href'd on that line
	 */
	private static ArrayList<String> getLinks(String str) {
		if (!str.contains("href=" + "\"" + "/wiki/"))
			return null;

		ArrayList<String> s = new ArrayList<String>();
		String[] ar = str.split("href=" + "\"" + "/wiki/");
		for (int i = 1; i < ar.length; i++) {
			s.add(ar[i]);
		}
		return s;
	}
}


Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 269
Text-content-md5: 6e306822bdc42e45e27d52d158503cca
Text-content-sha1: 67bf9c0b0fbbdd76c8fbd5a2007635793c4804cc
Content-length: 269

import java.net.URL;

import javax.swing.JFrame;

public class Runner extends JFrame {

	public Runner() {
		this.setSize(1000, 1000);
		this.setVisible(true);
	}
	
	public static void main(String args[]) {
		new ParentWikipedia("Legand of Zelda");
	}
}


Node-path: trunk/WikiWeb/src/Wikipedia.java
Node-kind: file
Node-action: change
Text-content-length: 885
Text-content-md5: a96e39452aad221a312c159e214d0786
Text-content-sha1: 999a3e7de489a2549a7105994bf5f3b34a9c2476
Content-length: 885

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

public abstract class Wikipedia {

	private String pageTitle;
	private URL url;
	private ArrayList<Wikipedia> rl;
	private static String URL_HEAD = "http://en.wikipedia.org/wiki/";
	
	/**
	 * 
	 * @param url - URL for that page, maybe for a future query or visiting the page
	 * @param pageTitle - The title associated with that page
	 */
	
	public Wikipedia(String pageTitle) {
		this.pageTitle = pageTitle;
		pageTitle = pageTitle.replace(" ", "_");
		try {
			url = new URL(URL_HEAD + pageTitle);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
	}
	
	public String getTitle() {
		return pageTitle;
	}
	
	public URL getURL() {
		return url;
	}
	
	@Override
	public String toString() {
		return pageTitle + " @ :" + url.toString();
	}
}


Revision-number: 13
Prop-content-length: 119
Content-length: 119

K 7
svn:log
V 10
Exception

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-06T17:26:30.011229Z
PROPS-END

Node-path: trunk/WikiWeb/src/RelaventLinks.java
Node-kind: file
Node-action: change
Text-content-length: 1369
Text-content-md5: bcd5b1481e5d252b9b4e5a9219bb2c4b
Text-content-sha1: c23215d3529e415abf20654b4a68a9131ad2be5b
Content-length: 1369

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelaventLinks {

	private BufferedReader allHtml;
	private ArrayList<Wikipedia> relaventLinks = null;

	public RelaventLinks(URL url) {
		try {
			URLConnection con = url.openConnection();
			allHtml = new BufferedReader(new InputStreamReader(
					con.getInputStream()));
			String now;
			ArrayList<String> lines = new ArrayList<String>();

			ArrayList<String> a = null;
			while ((now = allHtml.readLine()) != null) {
				a = getLinks(now);
				
				if (a != null)
					for (int i = 0; i < a.size(); i++) {
						lines.add(a.get(i));
					}
			}
						
			for (int i = 0; i < lines.size(); i++) {
				System.out.println(lines.get(i));
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @param link
	 *            -line of html
	 * @return all the Wikipedia pages href'd on that line
	 */
	private static ArrayList<String> getLinks(String str) {
		if (!str.contains("href=" + "\"" + "/wiki/"))
			return null;

		ArrayList<String> s = new ArrayList<String>();
		String[] ar = str.split("href=" + "\"" + "/wiki/");
		for (int i = 1; i < ar.length; i++) {
			s.add(ar[i]);
		}
		return s;
	}
}


Revision-number: 14
Prop-content-length: 126
Content-length: 126

K 7
svn:log
V 17
Added Parent Wiki
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-06T17:29:27.165601Z
PROPS-END

Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 270
Text-content-md5: 783299e1a81af576c1bf181aabbd541f
Text-content-sha1: 364abe80c808ec1e97102779ccf62d61663d9dfb
Content-length: 270

import java.net.URL;

import javax.swing.JFrame;

public class Runner extends JFrame {

	public Runner() {
		this.setSize(1000, 1000);
		this.setVisible(true);
	}
	
	public static void main(String args[]) {
		new ParentWikipedia("Legends Of Zelda");
	}
}


Node-path: trunk/WikiWeb/src/Wikipedia.java
Node-kind: file
Node-action: change
Text-content-length: 931
Text-content-md5: 84dcac530074a69092dc2975f8d7215a
Text-content-sha1: a13c05908cdc83e80004e46903b3bae132b79344
Content-length: 931

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

public abstract class Wikipedia {

	private String pageTitle;
	private URL url;
	private ArrayList<Wikipedia> rl;
	private static String URL_HEAD = "http://en.wikipedia.org/wiki/";
	
	/**
	 * 
	 * @param url - URL for that page, maybe for a future query or visiting the page
	 * @param pageTitle - The title associated with that page
	 */
	
	public Wikipedia(String pageTitle) {
		this.pageTitle = pageTitle;
		pageTitle = pageTitle.replace(" ", "_");
		try {
			url = new URL(URL_HEAD + pageTitle);
			System.out.println(URL_HEAD + pageTitle);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
	}
	
	public String getTitle() {
		return pageTitle;
	}
	
	public URL getURL() {
		return url;
	}
	
	@Override
	public String toString() {
		return pageTitle + " @ :" + url.toString();
	}
}


Revision-number: 15
Prop-content-length: 115
Content-length: 115

K 7
svn:log
V 7
More oo
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-07T17:28:01.035811Z
PROPS-END

Node-path: trunk/WikiWeb/src/RelaventLinks.java
Node-kind: file
Node-action: change
Text-content-length: 2161
Text-content-md5: fb35d59c3ff34a94d8e2b91abe612e71
Text-content-sha1: a296bc2df67323eaae2dcf796b4c8526573c36cd
Content-length: 2161

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Iterator;

public class RelaventLinks {

	private BufferedReader allHtml;
	private ArrayList<WikipediaLink> relaventLinks = null;

	public RelaventLinks(URL url) {
		try {
			URLConnection con = url.openConnection();
			allHtml = new BufferedReader(new InputStreamReader(
					con.getInputStream()));
			String now;
			ArrayList<String> lines = new ArrayList<String>();

			ArrayList<String> a = null;
			while ((now = allHtml.readLine()) != null) {
				a = getLinks(now);

				if (a != null)
					for (int i = 0; i < a.size(); i++) {
						lines.add(a.get(i));
					}
			}

			relaventLinks = getWikipediaLinks(lines);
			//XXX see if that actually worked.
			/**
			 * Princess_Zelda
 title=
Princess Zelda
>Zelda</a> (who is able to transform into <a
null
			 */
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private ArrayList<WikipediaLink> getWikipediaLinks(ArrayList<String> lines) {
		ArrayList<WikipediaLink> wl = new ArrayList<WikipediaLink>();

		for (int i = 0; i < lines.size(); i++) {
			String[] titleLink = getTitleAndLink(lines.get(i));
			try {
				URL url = new URL(WikipediaLink.URL_HEAD+titleLink[1]);
				wl.add(new WikipediaLink(titleLink[0], url));
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
			
			
		}
		return null;
	}

	private static String[] getTitleAndLink(String line) {
		String[] ar = line.split("\"");
		return new String[] {ar[2], ar[0]};
	}

	/**
	 * 
	 * @param link
	 *            -line of html
	 * @return all the Wikipedia pages href'd on that line
	 */
	private static ArrayList<String> getLinks(String str) {
		if (!str.contains(WikipediaLink.STRING_SPLITTER))
			return null;

		ArrayList<String> s = new ArrayList<String>();
		String[] ar = str.split(WikipediaLink.STRING_SPLITTER);
		for (int i = 1; i < ar.length; i++) {
			s.add(ar[i]);
		}
		return s;
	}
}


Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 273
Text-content-md5: 3ff3407240a1ab122bde1f9cd888076e
Text-content-sha1: 6c9848dad5c0919590349ba0f0736bc8aba9d18c
Content-length: 273

import java.net.URL;

import javax.swing.JFrame;

public class Runner extends JFrame {

	public Runner() {
		this.setSize(1000, 1000);
		this.setVisible(true);
	}
	
	public static void main(String args[]) {
		new WikipediaLinkSearch("Legend Of Zelda");
	}
}


Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 219
Text-content-md5: 173a7af529f738a4c8cb28c1217b1d35
Text-content-sha1: e2c76c1bc7547cab8e5e820733f00fb482b93be0
Content-length: 264

K 13
svn:mime-type
V 10
text/plain
PROPS-END

public class Tester {
	public static void main(String[] args) {
		System.out.println(RelaventLinks.getTitleFromLine("Princess_Zelda\" title=\"Princess Zelda\">Zelda</a> (who is able to transform into <a"));
	}
}


Node-path: trunk/WikiWeb/src/WikipediaLink.java
Node-kind: file
Node-action: add
Node-copyfrom-rev: 14
Node-copyfrom-path: trunk/WikiWeb/src/Wikipedia.java
Text-copy-source-md5: 84dcac530074a69092dc2975f8d7215a
Text-copy-source-sha1: a13c05908cdc83e80004e46903b3bae132b79344
Text-content-length: 1118
Text-content-md5: ab6f9e1f0c92c161605f4288c9cf3a20
Text-content-sha1: b9bc7d6f00067637e4659abb779a2b35293a1969
Content-length: 1118

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

public class WikipediaLink {

	private String pageTitle;
	private URL url;
	public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
	public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
	
	/**
	 * 
	 * @param url
	 *            - URL for that page, maybe for a future query or visiting the
	 *            page
	 * @param pageTitle
	 *            - The title associated with that page
	 */

	public WikipediaLink(String pageTitle) {
		this.pageTitle = pageTitle;
		pageTitle = pageTitle.replace(" ", "_");
		try {
			url = new URL(URL_HEAD + pageTitle);
			System.out.println(URL_HEAD + pageTitle);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
	}
	
	public WikipediaLink(String pageTitle, URL url) {
		this.pageTitle = pageTitle;
		this.url = url;
	}

	public String getTitle() {
		return pageTitle;
	}

	public URL getURL() {
		return url;
	}

	@Override
	public String toString() {
		return pageTitle + " @ :" + url.toString();
	}
	
}


Node-path: trunk/WikiWeb/src/WikipediaLinkSearch.java
Node-kind: file
Node-action: add
Node-copyfrom-rev: 12
Node-copyfrom-path: trunk/WikiWeb/src/ParentWikipedia.java
Text-copy-source-md5: f985fd29c18ea0c13cab463aa97fba73
Text-copy-source-sha1: 91adc7ddacd10524f1e9fd2ee1fc202fe58401a3
Text-content-length: 257
Text-content-md5: ef47df258ab1a2e0ddc7d73036476999
Text-content-sha1: 8915a80a6ae8055d9dcf5ec000b8546667cc4f51
Content-length: 257

import java.net.URL;

public class WikipediaLinkSearch extends WikipediaLink {

	private RelaventLinks relaventLinks;
	
	public WikipediaLinkSearch(String pageTitle) {
		super(pageTitle);
		relaventLinks = new RelaventLinks(super.getURL());
	}
}


Node-path: trunk/WikiWeb/src/Wikipedia.java
Node-action: delete


Node-path: trunk/WikiWeb/src/ParentWikipedia.java
Node-action: delete


Revision-number: 16
Prop-content-length: 117
Content-length: 117

K 7
svn:log
V 9
Tester ce
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-07T17:28:31.664211Z
PROPS-END

Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 221
Text-content-md5: 661002e8aa859d8bcc1459e578a9e4d7
Text-content-sha1: c44591018ea117332d2895d655ebc844a91b4387
Content-length: 221


public class Tester {
	public static void main(String[] args) {
//		System.out.println(RelaventLinks.getTitleFromLine("Princess_Zelda\" title=\"Princess Zelda\">Zelda</a> (who is able to transform into <a"));
	}
}


Revision-number: 17
Prop-content-length: 145
Content-length: 145

K 7
svn:log
V 36
Working object oriented Wiki objects
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-07T19:01:10.798651Z
PROPS-END

Node-path: trunk/WikiWeb/src/RelaventLinks.java
Node-kind: file
Node-action: change
Text-content-length: 2953
Text-content-md5: 8e1303974af80c15768eee903bf88ae2
Text-content-sha1: e84548c90c53f6f4f4e193fbf1271b68784e32b4
Content-length: 2953

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelaventLinks {

    private BufferedReader allHtml;
    private ArrayList<WikipediaLink> relaventLinks = null;

    public RelaventLinks(URL url) {
        try {
            URLConnection con = url.openConnection();
            allHtml = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String now;
            ArrayList<String> lines = new ArrayList<String>();

            ArrayList<String> a = null;
            while ((now = allHtml.readLine()) != null) {
                a = getLinks(now);

                if (a != null)
                    for (int i = 0; i < a.size(); i++) {
                        lines.add(a.get(i));
                    }
            }

            for (int i = 0; i < lines.size(); i++) {
//                System.out.println(lines.get(i));
            }

            relaventLinks = getWikipediaLinks(lines);

            for (int i = 0; i < relaventLinks.size(); i++) {
                System.out.println(relaventLinks.get(i));
            }

            //XXX see if that actually worked.
            /**
             * Princess_Zelda
             title=
             Princess Zelda
             >Zelda</a> (who is able to transform into <a
             null
             */
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String[] getTitleAndLink(String line) {
        String[] ar = line.split("\"");
        if (ar.length <= 2) {
            return null;
        }
        return new String[]{ar[2], ar[0]};
    }

    /**
     * @return all the Wikipedia pages href'd on that line
     */
    private static ArrayList<String> getLinks(String str) {
        if (!str.contains(WikipediaLink.STRING_SPLITTER))
            return null;

        ArrayList<String> s = new ArrayList<String>();
        String[] ar = str.split(WikipediaLink.STRING_SPLITTER);
        for (int i = 1; i < ar.length; i++) {
            s.add(ar[i]);
        }
        return s;
    }

    private ArrayList<WikipediaLink> getWikipediaLinks(ArrayList<String> lines) {
        ArrayList<WikipediaLink> wl = new ArrayList<WikipediaLink>();

        for (int i = 0; i < lines.size(); i++) {
            String[] titleLink = getTitleAndLink(lines.get(i));
            if (titleLink != null) {
                try {
                    URL url = new URL(WikipediaLink.URL_HEAD + titleLink[1]);
                    wl.add(new WikipediaLink(titleLink[0], url));
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

            }
        }
        return wl;
    }
}


Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 273
Text-content-md5: 1e7a146c46daf35b7ca58e5110f7be24
Text-content-sha1: 6da8c1718b9f358a61a3524eafcf85c1204e35ad
Content-length: 273

import javax.swing.*;

public class Runner extends JFrame {

    public Runner() {
        this.setSize(1000, 1000);
        this.setVisible(true);
    }

    public static void main(String args[]) {
        new WikipediaLinkSearch("Legend of Zelda");
    }
}


Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 139
Text-content-md5: cd1af9a079131435dc96ba758b7178bd
Text-content-sha1: 97de687033605be360b0601c50c4b88d419ca596
Content-length: 139


public class Tester {
    public static void main(String[] args) {
//        String[] ar = RelaventLinks.getTitleAndLink();
    }
}


Node-path: trunk/WikiWeb/src/WikipediaLink.java
Node-kind: file
Node-action: change
Text-content-length: 1010
Text-content-md5: de4c92d7bed83fa17a2f5dfe102d9708
Text-content-sha1: 2ea66ded329853294477a77db97457ab477c917b
Content-length: 1010

import java.net.MalformedURLException;
import java.net.URL;

public class WikipediaLink {

    public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
    public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
    private String pageTitle;
    private URL url;

    public WikipediaLink(String pageTitle) {
        this.pageTitle = pageTitle;
        pageTitle = pageTitle.replace(" ", "_");
        try {
            url = new URL(URL_HEAD + pageTitle);
            System.out.println(URL_HEAD + pageTitle);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
    }

    public WikipediaLink(String pageTitle, URL url) {
        this.pageTitle = pageTitle;
        this.url = url;
    }

    public String getTitle() {
        return pageTitle;
    }

    public URL getURL() {
        return url;
    }

    @Override
    public String toString() {
        return pageTitle + " \t@\t " + url.toString();
    }

}


Node-path: trunk/WikiWeb/src/WikipediaLinkSearch.java
Node-kind: file
Node-action: change
Text-content-length: 253
Text-content-md5: c804189f4d2e8ab4add7bdeb2e28f56c
Text-content-sha1: 89028b3a37171f1512ce679743fb9c926bb3fd69
Content-length: 253

public class WikipediaLinkSearch extends WikipediaLink {

    private RelaventLinks relaventLinks;

    public WikipediaLinkSearch(String pageTitle) {
        super(pageTitle);
        relaventLinks = new RelaventLinks(super.getURL());
    }
}


Node-path: trunk/WikiWeb/.classpath
Node-action: delete


Node-path: trunk/WikiWeb/.project
Node-action: delete


Revision-number: 18
Prop-content-length: 133
Content-length: 133

K 7
svn:log
V 24
Good stuff is happening

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-07T19:14:25.197043Z
PROPS-END

Node-path: trunk/WikiWeb/src/RelevantLinks.java
Node-kind: file
Node-action: add
Node-copyfrom-rev: 17
Node-copyfrom-path: trunk/WikiWeb/src/RelaventLinks.java
Text-copy-source-md5: 8e1303974af80c15768eee903bf88ae2
Text-copy-source-sha1: e84548c90c53f6f4f4e193fbf1271b68784e32b4
Prop-content-length: 45
Text-content-length: 2440
Text-content-md5: 082cc094b9eb20235f72d85821202395
Text-content-sha1: 6fa91dc60fbb899eb39fdaacb16f349901827c56
Content-length: 2485

K 13
svn:mime-type
V 10
text/plain
PROPS-END
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelevantLinks {

    private ArrayList<WikipediaLink> relaventLinks;

    public RelevantLinks(URL url) {
        try {
            URLConnection con = url.openConnection();
            BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String now;
            ArrayList<String> lines = new ArrayList<String>();

            ArrayList<String> a = null;
            while ((now = allHtml.readLine()) != null) {
                a = getLinks(now);

                if (a != null)
                    for (int i = 0; i < a.size(); i++) {
                        lines.add(a.get(i));
                    }
            }
            relaventLinks = getWikipediaLinks(lines);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String[] getTitleAndLink(String line) {
        String[] ar = line.split("\"");
        if (ar.length <= 2) {
            return null;
        }
        return new String[]{ar[2], ar[0]};
    }

    private static ArrayList<String> getLinks(String str) {
        if (!str.contains(WikipediaLink.STRING_SPLITTER))
            return null;

        ArrayList<String> s = new ArrayList<String>();
        String[] ar = str.split(WikipediaLink.STRING_SPLITTER);
        for (int i = 1; i < ar.length; i++) {
            s.add(ar[i]);
        }
        return s;
    }

    private ArrayList<WikipediaLink> getWikipediaLinks(ArrayList<String> lines) {
        ArrayList<WikipediaLink> wl = new ArrayList<WikipediaLink>();

        for (int i = 0; i < lines.size(); i++) {
            String[] titleLink = getTitleAndLink(lines.get(i));
            if (titleLink != null) {
                try {
                    URL url = new URL(WikipediaLink.URL_HEAD + titleLink[1]);
                    wl.add(new WikipediaLink(titleLink[0], url));
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

            }
        }
        return wl;
    }

    public ArrayList<WikipediaLink> getWikipediaLinks(){
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 139
Text-content-md5: 5dd5e0de6fef930a2d33e543ea7a72ad
Text-content-sha1: 91e6644f52b04a2c29f3c9850ab0d70d89ae058e
Content-length: 139


public class Tester {
    public static void main(String[] args) {
//        String[] ar = RelevantLinks.getTitleAndLink();
    }
}


Node-path: trunk/WikiWeb/src/WikipediaLinkSearch.java
Node-kind: file
Node-action: change
Text-content-length: 253
Text-content-md5: 885d495a2a7bf1329b3a42215d31b3ea
Text-content-sha1: 0d62451cb384a18e62939051c253857a60392880
Content-length: 253

public class WikipediaLinkSearch extends WikipediaLink {

    private RelevantLinks relaventLinks;

    public WikipediaLinkSearch(String pageTitle) {
        super(pageTitle);
        relaventLinks = new RelevantLinks(super.getURL());
    }
}


Node-path: trunk/WikiWeb/src/RelaventLinks.java
Node-action: delete


Revision-number: 19
Prop-content-length: 211
Content-length: 211

K 7
svn:log
V 101
Starting to parse the page that will provide e with the download statistics for my relevance sorting.
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-09T04:14:10.804882Z
PROPS-END

Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 278
Text-content-md5: 4219bb92926abdcd173f40c7aacb238f
Text-content-sha1: 09860a967c7e3f91b41de18d23115fcf7914723c
Content-length: 278

import javax.swing.*;

public class Runner extends JFrame {

    public Runner() {
        this.setSize(1000, 1000);
        this.setVisible(true);
    }

    public static void main(String args[]) {
        new WikipediaLinkSearch("Software engineering");
    }
}


Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 1274
Text-content-md5: 8f85eb64e7294550b4586b5b144543ee
Text-content-sha1: 7c0a0419a32a64f8dfaf73827de0d4e5ad5c31ad
Content-length: 1274

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class Tester {
    public static void main(String[] args) throws Exception {
        //Get the date links from the dump page
        //goto the last one
        //change to that as the base
        //then go and get the mose recent thing there
        //change to that as the base
        //download that file and think
    }

    public static ArrayList<String> getOccurancesInHtml(URL url, String spl) throws Exception {
        URLConnection con = url.openConnection();
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl+arr[1]);
            }
        }
        return split;
    }
}


Node-path: trunk/WikiWeb/src/WikipediaLinkSearch.java
Node-kind: file
Node-action: change
Text-content-length: 461
Text-content-md5: c2db5b6629fffa9cbd0d6f72b33ee659
Text-content-sha1: 947b8aaf1df6222efb156335c4712f77b2afb1de
Content-length: 461

import java.util.ArrayList;

public class WikipediaLinkSearch extends WikipediaLink {

    private RelevantLinks relaventLinks;

    public WikipediaLinkSearch(String pageTitle) {
        super(pageTitle);
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikipediaLink> al= relaventLinks.getWikipediaLinks();
        for (int i = 0; i < al.size(); i++) {
            System.out.println(al.get(i));
        }
    }
}


Revision-number: 20
Prop-content-length: 115
Content-length: 115

K 7
svn:log
V 7
cfsvfzg
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-10T17:18:12.466838Z
PROPS-END

Node-path: trunk/WikiWeb/.classpath
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 301
Text-content-md5: 52066c574fbd09ed317a73ebe8ef2d0b
Text-content-sha1: b871a406b31b850f5e1d7251f9c8e368fe6972be
Content-length: 346

K 13
svn:mime-type
V 10
text/plain
PROPS-END
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
	<classpathentry kind="output" path="bin"/>
</classpath>


Node-path: trunk/WikiWeb/.project
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 383
Text-content-md5: 8abca4281845c5bab804ba6a937ad1b7
Text-content-sha1: 5c0fbfd78d09eb0ab46f5241e3a88bc53236609e
Content-length: 428

K 13
svn:mime-type
V 10
text/plain
PROPS-END
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>WikiWeb</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>org.eclipse.jdt.core.javabuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>org.eclipse.jdt.core.javanature</nature>
	</natures>
</projectDescription>


Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 1653
Text-content-md5: 1ee6e74d29351e21440e9b92439d3b84
Text-content-sha1: 3087346de94542c6df5aca1bb8c81056dbaf2926
Content-length: 1653

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class Tester {
	public static void main(String[] args) throws Exception {
		String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
		URL stepOne = new URL(root);
		ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

		String year = last.get(last.size() - 1).split("\"")[1] + "/";

		URL stepTwo = new URL(root + year);
		ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
		String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

		URL stepThree = new URL(root + year + hour);
		ArrayList<String> filePage = getOccurancesInHtml(stepThree,
				"href=\"pagecounts");
		String file = filePage.get(filePage.size() - 1).split("\"")[1];

		URL theFileToBeDownloaded = new URL(root + year + hour + file);
		System.out.println(theFileToBeDownloaded);
	}

	public static ArrayList<String> getOccurancesInHtml(URL url, String spl)
			throws Exception {
		URLConnection con = url.openConnection();
		BufferedReader allHtml = new BufferedReader(new InputStreamReader(
				con.getInputStream()));
		String now;
		ArrayList<String> lines = new ArrayList<String>();

		while ((now = allHtml.readLine()) != null) {
			if (now.contains(spl))
				lines.add(now);
		}
		ArrayList<String> split = new ArrayList<String>();
		for (int i = 0; i < lines.size(); i++) {
			String[] arr = lines.get(i).split(spl);
			for (int j = 1; j < arr.length; j++) {
				split.add(spl + arr[1]);
			}
		}
		return split;
	}
}


Revision-number: 21
Prop-content-length: 135
Content-length: 135

K 7
svn:log
V 26
Possible working download

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-11T17:30:23.163928Z
PROPS-END

Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 2463
Text-content-md5: 0bf065afa388033f254057f30a81a260
Text-content-sha1: 53ac233a6a208f65f58755fdb901fcd7ffeef04b
Content-length: 2463

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class Tester {
	public static void main(String[] args) throws Exception {
		String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
		URL stepOne = new URL(root);
		ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

		String year = last.get(last.size() - 1).split("\"")[1] + "/";

		URL stepTwo = new URL(root + year);
		ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
		String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

		URL stepThree = new URL(root + year + hour);
		ArrayList<String> filePage = getOccurancesInHtml(stepThree,
				"href=\"pagecounts");
		String file = filePage.get(filePage.size() - 1).split("\"")[1];

		URL theFileToBeDownloaded = new URL(root + year + hour + file);
		System.out.println(theFileToBeDownloaded);

		InputStream in = null;
		OutputStream out = null;
		URLConnection con = null;

		out = new BufferedOutputStream(new FileOutputStream("download.gz"));
		con = theFileToBeDownloaded.openConnection();
		con.addRequestProperty("User-agent","Mozilla/2.0.0.11");
		in = con.getInputStream();

		byte[] buffer = new byte[1024];

		int numRead;
		long numWritten = 0;

		while ((numRead = in.read(buffer)) != -1) {
			out.write(buffer, 0, numRead);
			numWritten += numRead;
			System.out.println(numWritten);
		}

		if (in != null) {
			in.close();
		}
		if (out != null) {
			out.close();
		}

	}

	public static ArrayList<String> getOccurancesInHtml(URL url, String spl)
			throws Exception {
		URLConnection con = url.openConnection();
		con.addRequestProperty("User-agent","Mozilla/2.0.0.11");
		BufferedReader allHtml = new BufferedReader(new InputStreamReader(
				con.getInputStream()));
		String now;
		ArrayList<String> lines = new ArrayList<String>();

		while ((now = allHtml.readLine()) != null) {
			if (now.contains(spl))
				lines.add(now);
		}
		ArrayList<String> split = new ArrayList<String>();
		for (int i = 0; i < lines.size(); i++) {
			String[] arr = lines.get(i).split(spl);
			for (int j = 1; j < arr.length; j++) {
				split.add(spl + arr[1]);
			}
		}
		return split;
	}
}


Revision-number: 22
Prop-content-length: 165
Content-length: 165

K 7
svn:log
V 56
Got the downloads and the links now i need to join them

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-12T12:31:37.265157Z
PROPS-END

Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 2792
Text-content-md5: 6ca71e3dfb435ef1ff8627a851d54d12
Text-content-sha1: 45ee0bfb37e75f7b528cca99e46e251396a60783
Content-length: 2792

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class Tester {
    public static void main(String[] args) throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        String file = filePage.get(filePage.size() - 1).split("\"")[1];

        URL theFileToBeDownloaded = new URL(root + year + hour + file);
        System.out.println(theFileToBeDownloaded);

        InputStream in = null;
        OutputStream out = null;
        URLConnection con = null;

        out = new BufferedOutputStream(new FileOutputStream("download"));
        con = theFileToBeDownloaded.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        in = con.getInputStream();
        GZIPInputStream gzipInputStream = new GZIPInputStream(in);
        System.out.println(theFileToBeDownloaded);

        byte[] buffer = new byte[1024];

        int numRead;
        long numWritten = 0;

        while ((numRead = gzipInputStream.read(buffer)) != -1) {
            out.write(buffer, 0, numRead);
            numWritten += numRead;
        }

        if (in != null) {
            in.close();
        }
        if (out != null) {
            out.close();
        }
    }

    public static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }
}


Revision-number: 23
Prop-content-length: 156
Content-length: 156

K 7
svn:log
V 47
check if the file exists before downloading it

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-12T17:21:38.777592Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 2692
Text-content-md5: 45d7e09a3f8b80ae582378ec796e98c5
Text-content-sha1: ebf1386075d2dad61b35ba042f5c797ac5353aa3
Content-length: 2737

K 13
svn:mime-type
V 10
text/plain
PROPS-END
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider {

	private BufferedReader br;

	public DownloadStatisticProvider() throws Exception {
		String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
		URL stepOne = new URL(root);
		ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

		String year = last.get(last.size() - 1).split("\"")[1] + "/";

		URL stepTwo = new URL(root + year);
		ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
		String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

		URL stepThree = new URL(root + year + hour);
		ArrayList<String> filePage = getOccurancesInHtml(stepThree,
				"href=\"pagecounts");
		String file = (filePage.get(filePage.size() - 1).split("\"")[1])
				.replace(".gz", "");

		URL theFileToBeDownloaded = new URL(root + year + hour + file);

		//File f = new File(file);
		if (false) {
			InputStream in = null;
			OutputStream out = null;
			URLConnection con = null;

			out = new BufferedOutputStream(new FileOutputStream(file.toString()
					.replace(".gz", "")));
			con = theFileToBeDownloaded.openConnection();
			con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
			in = con.getInputStream();
			GZIPInputStream gzipInputStream = new GZIPInputStream(in);

			byte[] buffer = new byte[1024];

			int numRead;
			long numWritten = 0;

			while ((numRead = gzipInputStream.read(buffer)) != -1) {
				out.write(buffer, 0, numRead);
				numWritten += numRead;
			}

			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		}
	}

	public static ArrayList<String> getOccurancesInHtml(URL url, String spl)
			throws Exception {
		URLConnection con = url.openConnection();
		con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
		BufferedReader allHtml = new BufferedReader(new InputStreamReader(
				con.getInputStream()));
		String now;
		ArrayList<String> lines = new ArrayList<String>();

		while ((now = allHtml.readLine()) != null) {
			if (now.contains(spl))
				lines.add(now);
		}
		ArrayList<String> split = new ArrayList<String>();
		for (int i = 0; i < lines.size(); i++) {
			String[] arr = lines.get(i).split(spl);
			for (int j = 1; j < arr.length; j++) {
				split.add(spl + arr[1]);
			}
		}
		return split;
	}
}


Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 2491
Text-content-md5: 675086a2c22b313c75d3970dbf58793f
Text-content-sha1: b45d55329d379cdca80a32bfeb9a5941fd423b2c
Content-length: 2491

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class Tester {
	public static void main(String[] args) throws Exception {
		String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
		URL stepOne = new URL(root);
		ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

		String year = last.get(last.size() - 1).split("\"")[1] + "/";

		URL stepTwo = new URL(root + year);
		ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
		String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

		URL stepThree = new URL(root + year + hour);
		ArrayList<String> filePage = getOccurancesInHtml(stepThree,
				"href=\"pagecounts");
		String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

		URL theFileToBeDownloaded = new URL(root + year + hour + file);
		String fileWOExtension = file.replace(".gz", "");
		File f = new File(fileWOExtension);
		if (false) {
			InputStream in = null;
			OutputStream out = null;
			URLConnection con = null;

			out = new BufferedOutputStream(new FileOutputStream(fileWOExtension));
			con = theFileToBeDownloaded.openConnection();
			con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
			in = con.getInputStream();
			GZIPInputStream gzipInputStream = new GZIPInputStream(in);

			byte[] buffer = new byte[1024];

			int numRead;
			long numWritten = 0;

			while ((numRead = gzipInputStream.read(buffer)) != -1) {
				out.write(buffer, 0, numRead);
				numWritten += numRead;
			}

			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}

		}
		System.out.println(f.exists());

	}

	public static ArrayList<String> getOccurancesInHtml(URL url, String spl)
			throws Exception {
		URLConnection con = url.openConnection();
		con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
		BufferedReader allHtml = new BufferedReader(new InputStreamReader(
				con.getInputStream()));
		String now;
		ArrayList<String> lines = new ArrayList<String>();

		while ((now = allHtml.readLine()) != null) {
			if (now.contains(spl))
				lines.add(now);
		}
		ArrayList<String> split = new ArrayList<String>();
		for (int i = 0; i < lines.size(); i++) {
			String[] arr = lines.get(i).split(spl);
			for (int j = 1; j < arr.length; j++) {
				split.add(spl + arr[1]);
			}
		}
		return split;
	}
}


Revision-number: 24
Prop-content-length: 130
Content-length: 130

K 7
svn:log
V 21
Check file size first
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-12T17:28:54.353360Z
PROPS-END

Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 2556
Text-content-md5: 0af599dfe03f219a51125aa2b61af398
Text-content-sha1: ff77ef1a973c540d2535f8d037cc5970b4f6bc0c
Content-length: 2556

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class Tester {
	public static void main(String[] args) throws Exception {
		String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
		URL stepOne = new URL(root);
		ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

		String year = last.get(last.size() - 1).split("\"")[1] + "/";

		URL stepTwo = new URL(root + year);
		ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
		String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

		URL stepThree = new URL(root + year + hour);
		ArrayList<String> filePage = getOccurancesInHtml(stepThree,
				"href=\"pagecounts");
		String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

		URL theFileToBeDownloaded = new URL(root + year + hour + file);
		String fileWOExtension = file.replace(".gz", "");
		File f = new File(fileWOExtension);
		//if (!f.exists()) {
			InputStream in = null;
			OutputStream out = null;
			URLConnection con = null;

			out = new BufferedOutputStream(new FileOutputStream(fileWOExtension));
			con = theFileToBeDownloaded.openConnection();
			con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
			in = con.getInputStream();
			GZIPInputStream gzipInputStream = new GZIPInputStream(in);
			System.out.println(con.getHeaderFields().get("content-Length"));

			byte[] buffer = new byte[1024];

			int numRead;
			long numWritten = 0;

			while ((numRead = gzipInputStream.read(buffer)) != -1) {
				out.write(buffer, 0, numRead);
				numWritten += numRead;
			}

			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}

		//}
	}

	public static ArrayList<String> getOccurancesInHtml(URL url, String spl)
			throws Exception {
		URLConnection con = url.openConnection();
		con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
		BufferedReader allHtml = new BufferedReader(new InputStreamReader(
				con.getInputStream()));
		String now;
		ArrayList<String> lines = new ArrayList<String>();

		while ((now = allHtml.readLine()) != null) {
			if (now.contains(spl))
				lines.add(now);
		}
		ArrayList<String> split = new ArrayList<String>();
		for (int i = 0; i < lines.size(); i++) {
			String[] arr = lines.get(i).split(spl);
			for (int j = 1; j < arr.length; j++) {
				split.add(spl + arr[1]);
			}
		}
		Thread.sleep(1000);
		return split;
	}
}


Revision-number: 25
Prop-content-length: 143
Content-length: 143

K 7
svn:log
V 34
Starting work on the filtered list
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-12T18:27:00.059334Z
PROPS-END

Node-path: trunk/WikiWeb/src/WikiFilter.java
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 373
Text-content-md5: b60a411b8f7f89f8683df42305e32e76
Text-content-sha1: 0492308fd431eb9922f34afde4d120e40a73d2b0
Content-length: 383

PROPS-END
import java.util.ArrayList;

/**
 * Created with IntelliJ IDEA.
 * User: parthmehrotra
 * Date: 6/12/13
 * Time: 2:02 PM
 * To change this template use File | Settings | File Templates.
 */
public class WikiFilter {
    private ArrayList<String> filters = new ArrayList<String>();

    public WikiFilter(ArrayList<String> filters) {
        this.filters = filters;
    }
}


Node-path: trunk/WikiWeb/src/WikipediaLink.java
Node-kind: file
Node-action: change
Text-content-length: 985
Text-content-md5: 86d9527aa77ffd230795f8337becd2b4
Text-content-sha1: 9f654b1fec69fb0e1ccfcb97081f073e4e0e00c5
Content-length: 985

import java.net.MalformedURLException;
import java.net.URL;

public class WikipediaLink {

    public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
    public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
    private String pageTitle;
    private URL url;

    public WikipediaLink(String pageTitle) {
        this.pageTitle = pageTitle;
        pageTitle = pageTitle.replace(" ", "_");//XXX should this be switched?
        try {
            url = new URL(URL_HEAD + pageTitle);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
    }

    public WikipediaLink(String pageTitle, URL url) {
        this.pageTitle = pageTitle;
        this.url = url;
    }

    public String getTitle() {
        return pageTitle;
    }

    public URL getURL() {
        return url;
    }

    @Override
    public String toString() {
        return pageTitle + " \t@\t " + url.toString();
    }

}


Node-path: trunk/WikiWeb/src/WikipediaLinkSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1074
Text-content-md5: 1dbfd8782afa37173b0be68f7f3f7d6c
Text-content-sha1: 51e4d6e0e88f335696a356bb4747556b02d7974b
Content-length: 1074

import java.util.ArrayList;

public class WikipediaLinkSearch extends WikipediaLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;

    public WikipediaLinkSearch(String pageTitle) {
        super(pageTitle);
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikipediaLink> al = relaventLinks.getWikipediaLinks();
    }

    public WikipediaLinkSearch(String pageTitle, WikiFilter filter) {
        super(pageTitle);
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikipediaLink> al = relaventLinks.getWikipediaLinks();

    }

    public ArrayList<WikipediaLink> getFilteredWikipediaLinks() {
        ArrayList<WikipediaLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();

        for (int i = 0; i < unfilteredList.size(); i++) {
            
        }

        return unfilteredList;
        
    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Revision-number: 26
Prop-content-length: 195
Content-length: 195

K 7
svn:log
V 86
Updated namespace and moved the download logic to the downloadStatisticsProvider class
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-13T03:51:00.396497Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 3672
Text-content-md5: 250431b971c2fc45e7cfb888f85cc9cf
Text-content-sha1: df3773652ce2f23ce97854af9bdf877e2f28de5c
Content-length: 3672

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider {

    private BufferedReader br;

    public DownloadStatisticProvider() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

        URL theFileToBeDownloaded = new URL(root + year + hour + file);
        String fileWOExtension = file.replace(".gz", "");
        File zippedFile = new File(fileWOExtension + ".gz");
        File unzippedFile = new File(fileWOExtension);
        if (!unzippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            int length = Integer.parseInt(con.getHeaderFields().get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }

            GZIPInputStream gzipInputStream = new GZIPInputStream(new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(unzippedFile);

            int len = 0;
            int cum = 0;
            byte[] zipBuffer = new byte[1024];
            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
            }

            gzipInputStream.close();
            fileOutputStream.close();
        }
        br = new BufferedReader(new FileReader(unzippedFile));
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }


}


Node-path: trunk/WikiWeb/src/RelevantLinks.java
Node-kind: file
Node-action: change
Text-content-length: 2396
Text-content-md5: 32eb83c4bfac00be6968067577d3835d
Text-content-sha1: 47f5bb7adc5996da673bdc4c766d424895689640
Content-length: 2396

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelevantLinks {

    private ArrayList<WikiLink> relaventLinks;

    public RelevantLinks(URL url) {
        try {
            URLConnection con = url.openConnection();
            BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String now;
            ArrayList<String> lines = new ArrayList<String>();

            ArrayList<String> a = null;
            while ((now = allHtml.readLine()) != null) {
                a = getLinks(now);

                if (a != null)
                    for (int i = 0; i < a.size(); i++) {
                        lines.add(a.get(i));
                    }
            }
            relaventLinks = getWikipediaLinks(lines);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String[] getTitleAndLink(String line) {
        String[] ar = line.split("\"");
        if (ar.length <= 2) {
            return null;
        }
        return new String[]{ar[2], ar[0]};
    }

    private static ArrayList<String> getLinks(String str) {
        if (!str.contains(WikiLink.STRING_SPLITTER))
            return null;

        ArrayList<String> s = new ArrayList<String>();
        String[] ar = str.split(WikiLink.STRING_SPLITTER);
        for (int i = 1; i < ar.length; i++) {
            s.add(ar[i]);
        }
        return s;
    }

    private ArrayList<WikiLink> getWikipediaLinks(ArrayList<String> lines) {
        ArrayList<WikiLink> wl = new ArrayList<WikiLink>();

        for (int i = 0; i < lines.size(); i++) {
            String[] titleLink = getTitleAndLink(lines.get(i));
            if (titleLink != null) {
                try {
                    URL url = new URL(WikiLink.URL_HEAD + titleLink[1]);
                    wl.add(new WikiLink(titleLink[0], url));
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

            }
        }
        return wl;
    }

    public ArrayList<WikiLink> getWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 269
Text-content-md5: 8a0fd4f75e862ebb6e250d0602985250
Text-content-sha1: 511c22182794e764f8d93b42300a901b150efac2
Content-length: 269

import javax.swing.*;

public class Runner extends JFrame {

    public Runner() {
        this.setSize(1000, 1000);
        this.setVisible(true);
    }

    public static void main(String args[]) {
        new WikiSearch("Software engineering");
    }
}


Node-path: trunk/WikiWeb/src/Tester.java
Node-kind: file
Node-action: change
Text-content-length: 1147
Text-content-md5: d7885388cb033f1738011ece98677329
Text-content-sha1: 8ca76369a34a7486c4e891637f14a0307ca7c4e6
Content-length: 1147

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class Tester {
    public static void main(String[] args) throws Exception {

    }

    public static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        Thread.sleep(1000);
        return split;
    }
}


Node-path: trunk/WikiWeb/src/WikiLink.java
Node-kind: file
Node-action: add
Node-copyfrom-rev: 25
Node-copyfrom-path: trunk/WikiWeb/src/WikipediaLink.java
Text-copy-source-md5: 86d9527aa77ffd230795f8337becd2b4
Text-copy-source-sha1: 9f654b1fec69fb0e1ccfcb97081f073e4e0e00c5
Prop-content-length: 45
Text-content-length: 970
Text-content-md5: f3c4b3c676f4192c0f5927259623b9b3
Text-content-sha1: 3090e848b847ca3d469a5ced89584dbd8fc6af85
Content-length: 1015

K 13
svn:mime-type
V 10
text/plain
PROPS-END
import java.net.MalformedURLException;
import java.net.URL;

public class WikiLink {

    public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
    public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
    private String pageTitle;
    private URL url;

    public WikiLink(String pageTitle) {
        this.pageTitle = pageTitle;
        pageTitle = pageTitle.replace(" ", "_");//XXX should this be switched?
        try {
            url = new URL(URL_HEAD + pageTitle);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
    }

    public WikiLink(String pageTitle, URL url) {
        this.pageTitle = pageTitle;
        this.url = url;
    }

    public String getTitle() {
        return pageTitle;
    }

    public URL getURL() {
        return url;
    }

    @Override
    public String toString() {
        return pageTitle + " \t@\t " + url.toString();
    }

}


Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: add
Node-copyfrom-rev: 25
Node-copyfrom-path: trunk/WikiWeb/src/WikipediaLinkSearch.java
Text-copy-source-md5: 1dbfd8782afa37173b0be68f7f3f7d6c
Text-copy-source-sha1: 51e4d6e0e88f335696a356bb4747556b02d7974b
Prop-content-length: 45
Text-content-length: 1022
Text-content-md5: 09587838adc011b18bbd8d21d200885b
Text-content-sha1: ea971c2eb431eec131a18b90972eb9bb8b353349
Content-length: 1067

K 13
svn:mime-type
V 10
text/plain
PROPS-END
import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;

    public WikiSearch(String pageTitle) {
        super(pageTitle);
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();
    }

    public WikiSearch(String pageTitle, WikiFilter filter) {
        super(pageTitle);
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();

    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();

        for (int i = 0; i < unfilteredList.size(); i++) {
            
        }

        return unfilteredList;
        
    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/WikipediaLink.java
Node-action: delete


Node-path: trunk/WikiWeb/src/WikipediaLinkSearch.java
Node-action: delete


Revision-number: 27
Prop-content-length: 138
Content-length: 138

K 7
svn:log
V 29
Removed eclipse related stuff
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-13T03:52:16.574645Z
PROPS-END

Node-path: trunk/WikiWeb/.classpath
Node-action: delete


Node-path: trunk/WikiWeb/.project
Node-action: delete


Revision-number: 28
Prop-content-length: 122
Content-length: 122

K 7
svn:log
V 13
Added filters
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-13T04:35:02.806757Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 3979
Text-content-md5: a7933bfef5149e632e8fd9c28ac61305
Text-content-sha1: f75c4af92bacd819d7a31e70ea121278fde43983
Content-length: 3979

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider {

    private BufferedReader br;

    public DownloadStatisticProvider() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

        URL theFileToBeDownloaded = new URL(root + year + hour + file);
        String fileWOExtension = file.replace(".gz", "");
        File zippedFile = new File(fileWOExtension + ".gz");
        File unzippedFile = new File(fileWOExtension);
        if (!unzippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            int length = Integer.parseInt(con.getHeaderFields().get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }

            GZIPInputStream gzipInputStream = new GZIPInputStream(new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(unzippedFile);

            int len = 0;
            int cum = 0;
            byte[] zipBuffer = new byte[1024];
            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
            }

            gzipInputStream.close();
            fileOutputStream.close();
        }
        br = new BufferedReader(new FileReader(unzippedFile));
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    public boolean existingWord(String wordToCheck) throws Exception {
        String line = null;
        while ((line = br.readLine()) != null) {
            if (line.contains(wordToCheck) && (line.contains("en"))) {
                return true;
            }
        }
        return false;
    }
}


Node-path: trunk/WikiWeb/src/Idea
Node-kind: file
Node-action: change
Text-content-length: 229
Text-content-md5: 7680f32aaef1edabad6da978d64ae397
Text-content-sha1: f09a8db36c4e3f3cf2cddb1a62dea2f026cc838c
Content-length: 229

    Sort by: Page Counts
    X   Sort by: # of times that it appears on page
Add support for things other than text
Start your gui
Use the dump to index the search
Bold or "" things on page
Use the dump to offer suggestions

Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 1690
Text-content-md5: 656a12bfe4618aa5806833936595a4ab
Text-content-sha1: 668f611d4fcccfbc438ddd7b19a58eae4df3426e
Content-length: 1690

import javax.swing.*;
import java.util.ArrayList;

public class Runner extends JFrame {

    public Runner() {
        this.setSize(1000, 1000);
        this.setVisible(true);
    }

    public static void main(String args[]) {
        WikiFilter f = new WikiFilter(addFilters());
        new WikiSearch("Software engineering", f).getFilteredWikipediaLinks();
    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString.add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        return filterString;
    }
}


Node-path: trunk/WikiWeb/src/TODO
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 70
Text-content-md5: 265945a970797e9bd886acc4e674bfeb
Text-content-sha1: 86889f812f28e91432e420f293a82f3e2f9c2d35
Content-length: 80

PROPS-END
All the exception handling
Consistent download strategy
Documentation?

Node-path: trunk/WikiWeb/src/WikiFilter.java
Node-kind: file
Node-action: change
Text-content-length: 525
Text-content-md5: d2fe68acda424b2ab27f094cb755e6b0
Text-content-sha1: 401df236eb42e1a5a7b2a564e8984fb059786133
Content-length: 525

import java.util.ArrayList;

/**
 * Created with IntelliJ IDEA.
 * User: parthmehrotra
 * Date: 6/12/13
 * Time: 2:02 PM
 * To change this template use File | Settings | File Templates.
 */
public class WikiFilter {
    private ArrayList<String> filters = new ArrayList<String>();

    //TODO Empty Parameter method.

    public WikiFilter(ArrayList<String> filters) {
        this.filters = filters;
    }

    public ArrayList<String> getFilters() {
        return filters;
    }

    //TODO Add/remove all those methods
}


Node-path: trunk/WikiWeb/src/WikiLink.java
Node-kind: file
Node-action: change
Text-content-length: 979
Text-content-md5: 9c7662e0edd6a551ccfb2e487dd8d50f
Text-content-sha1: f42d87fe18f0f59a422aaa65560de987d6018b13
Content-length: 979

import java.net.MalformedURLException;
import java.net.URL;

public class WikiLink {

    public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
    public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
    private String pageTitle;
    private URL url;

    public WikiLink(String pageTitle) {
        this.pageTitle = pageTitle;
        pageTitle = pageTitle.replace(" ", "_");//XXX should this be switched?
        try {
            url = new URL(URL_HEAD + pageTitle);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
    }

    public WikiLink(String pageTitle, URL url) {
        this.pageTitle = pageTitle;
        this.url = url;
    }

    public String getTitle() {
        return pageTitle;
    }

    public URL getURL() {
        return url;
    }

    @Override
    public String toString() {
        return pageTitle + "\t";//+ " \t@\t " + url.toString();
    }

}


Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1807
Text-content-md5: 918e9e83c3b1c46ae3448e99357a8cea
Text-content-sha1: 47a1ba75fa9e72f68ba76347b39b32e114953377
Content-length: 1807

import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;

    public WikiSearch(String pageTitle) {
        super(pageTitle);
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();
    }

    public WikiSearch(String pageTitle, WikiFilter filter) {
        super(pageTitle);
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();

    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();
        ArrayList<WikiLink> filteredList = new ArrayList<WikiLink>();

        if (filter.getFilters().size() < 1) {
            return unfilteredList; // TODO Move this up and call the method instead, avoid creating unn objs.
        }

        for (int i = 0; i < unfilteredList.size(); i++) {
            boolean add = true;
            for (int j = 0; j < filter.getFilters().size(); j++) {
                if (unfilteredList.get(i).getTitle().contains(filter.getFilters().get(j))) {
                    add = false;
                }
            }
            if (add) {
                filteredList.add(unfilteredList.get(i));
            } else {
                filteredList.add(null); // TODO JUST FOR DEBUGING PURPOSES REMOVE IMMEDIATELY
            }
        }

        System.out.println(filteredList);
        System.out.println(unfilteredList);

        return filteredList;

    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Revision-number: 29
Prop-content-length: 172
Content-length: 172

K 7
svn:log
V 63
Now just have to associate downloahgkhjds with their view count
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-13T16:50:53.394378Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 4374
Text-content-md5: 0411fa1fee54addf47103a9d76278fc0
Text-content-sha1: 0cafd4684fe6b7ea8b49657663801d82fa105104
Content-length: 4374

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider {

    private BufferedReader br;

    public DownloadStatisticProvider() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

        URL theFileToBeDownloaded = new URL(root + year + hour + file);
        String fileWOExtension = file.replace(".gz", "");
        File zippedFile = new File(fileWOExtension + ".gz");
        File unzippedFile = new File(fileWOExtension);
        if (!unzippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            int length = Integer.parseInt(con.getHeaderFields().get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }

            GZIPInputStream gzipInputStream = new GZIPInputStream(new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(unzippedFile);

            int len = 0;
            int cum = 0;
            byte[] zipBuffer = new byte[1024];
            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
            }

            gzipInputStream.close();
            fileOutputStream.close();
        }
        br = new BufferedReader(new FileReader(unzippedFile));
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    public boolean existingWord(String wordToCheck) throws Exception {
        String line = null;
        while ((line = br.readLine()) != null) {
            if (line.contains(wordToCheck) && (line.contains("en "))) {
                return true;
            }
        }
        return false;
    }

    public long getPageView(WikiLink wl) throws Exception {
        String title = wl.getTitle();
        String line = null;
        String[] data = null;
        while ((line = br.readLine()) != null) {
            if (line.contains(title) && line.contains("en ")) {
                data = line.split(" ");
            }
        }
        return Integer.parseInt(data[2]);
    }
}


Node-path: trunk/WikiWeb/src/RelevantLinks.java
Node-kind: file
Node-action: change
Text-content-length: 2398
Text-content-md5: b42f022df87a2de8af7a7195e922e075
Text-content-sha1: dcb738e19bbebc4f7ee2d718867e014070c94d7b
Content-length: 2398

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelevantLinks {

    private ArrayList<WikiLink> relaventLinks;

    public RelevantLinks(URL url) {
        try {
            URLConnection con = url.openConnection();
            BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String now;
            ArrayList<String> lines = new ArrayList<String>();

            ArrayList<String> a = null;
            while ((now = allHtml.readLine()) != null) {
                a = getLinks(now);

                if (a != null)
                    for (int i = 0; i < a.size(); i++) {
                        lines.add(a.get(i));
                    }
            }
            relaventLinks = getWikipediaLinks(lines);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String[] getTitleAndLink(String line) {
        String[] ar = line.split("\"");
        if (ar.length <= 2) {
            return null;
        }
        return new String[]{ar[2], ar[0]};
    }

    private static ArrayList<String> getLinks(String str) {
        if (!str.contains(WikiLink.STRING_SPLITTER))
            return null;

        ArrayList<String> s = new ArrayList<String>();
        String[] ar = str.split(WikiLink.STRING_SPLITTER);
        for (int i = 1; i < ar.length; i++) {
            s.add(ar[i]);
        }
        return s;
    }

    private ArrayList<WikiLink> getWikipediaLinks(ArrayList<String> lines) {
        ArrayList<WikiLink> wl = new ArrayList<WikiLink>();

        for (int i = 0; i < lines.size(); i++) {
            String[] titleLink = getTitleAndLink(lines.get(i));
            if (titleLink != null) {
                try {
                    URL url = new URL(WikiLink.URL_HEAD + titleLink[1]);
                    wl.add(new WikiLink(titleLink[0], url, ));
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

            }
        }
        return wl;
    }

    public ArrayList<WikiLink> getWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/WikiLink.java
Node-kind: file
Node-action: change
Text-content-length: 1159
Text-content-md5: 0774ce27bcd2efab07a4a26f4705fa53
Text-content-sha1: a6c35a9d15b4e204968a60a216614b1965832d0c
Content-length: 1159

import java.net.MalformedURLException;
import java.net.URL;

public class WikiLink {

    public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
    public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
    private String pageTitle;
    private URL url;
    private long pageVC = 0;

    public WikiLink(String pageTitle, long pageVC) {
        this.pageTitle = pageTitle;
        pageTitle = pageTitle.replace(" ", "_");//XXX should this be switched?
        this.pageVC = pageVC;
        try {
            url = new URL(URL_HEAD + pageTitle);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
    }

    public WikiLink(String pageTitle, URL url, long pageVC) {
        this.pageTitle = pageTitle;
        this.url = url;
        this.pageVC = pageVC;
    }

    public String getTitle() {
        return pageTitle;
    }

    public URL getURL() {
        return url;
    }

    @Override
    public String toString() {
        return pageTitle + "\t" + " \t@\t " + url.toString();
    }

    public long getPageVC() {
        return pageVC;
    }

}


Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1673
Text-content-md5: c53de42f87d35762e60efd15e11fee0d
Text-content-sha1: 28ab5217990c8b59adf50dba7c3aa7e0220c912b
Content-length: 1673

import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;

    public WikiSearch(String pageTitle) {
        super(pageTitle);
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();
    }

    public WikiSearch(String pageTitle, WikiFilter filter) {
        super(pageTitle);
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();

    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();
        ArrayList<WikiLink> filteredList = new ArrayList<WikiLink>();

        if (filter.getFilters().size() < 1) {
            return unfilteredList; // TODO Move this up and call the method instead, avoid creating unn objs.
        }

        for (int i = 0; i < unfilteredList.size(); i++) {
            boolean add = true;
            for (int j = 0; j < filter.getFilters().size(); j++) {
                if (unfilteredList.get(i).getTitle().contains(filter.getFilters().get(j))) {
                    add = false;
                }
            }
            if (add)
                filteredList.add(unfilteredList.get(i));
        }

        System.out.println(filteredList);
        System.out.println(unfilteredList);

        return filteredList;

    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Revision-number: 30
Prop-content-length: 168
Content-length: 168

K 7
svn:log
V 59
Trying to figure out design pattern to access the downloads
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-13T17:20:55.010962Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 4050
Text-content-md5: 0fe65019ed6488f750d05673e2f3fc48
Text-content-sha1: aba22371e22373470d59908a72f6503f34030364
Content-length: 4050

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

	private BufferedReader br;

	public DownloadStatisticProvider() throws Exception {
		prep();
	}

	private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
			throws Exception {
		URLConnection con = url.openConnection();
		con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
		Thread.sleep(1000);
		BufferedReader allHtml = new BufferedReader(new InputStreamReader(
				con.getInputStream()));
		String now;
		ArrayList<String> lines = new ArrayList<String>();

		while ((now = allHtml.readLine()) != null) {
			if (now.contains(spl))
				lines.add(now);
		}
		ArrayList<String> split = new ArrayList<String>();
		for (int i = 0; i < lines.size(); i++) {
			String[] arr = lines.get(i).split(spl);
			for (int j = 1; j < arr.length; j++) {
				split.add(spl + arr[1]);
			}
		}
		return split;
	}

	@Override
	public boolean existingWord(String wordToCheck) throws Exception {
		String line = null;
		while ((line = br.readLine()) != null) {
			if (line.contains(wordToCheck) && (line.contains("en "))) {
				return true;
			}
		}
		return false;
	}

	@Override
	public long getPageView(String wl) throws Exception {
		String title = wl;
		String line = null;
		String[] data = null;
		while ((line = br.readLine()) != null) {
			if (line.contains(title) && line.contains("en ")) {
				data = line.split(" ");
			}
		}
		return Integer.parseInt(data[2]);
	}

	@Override
	public void prep() throws Exception {
		String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
		URL stepOne = new URL(root);
		ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

		String year = last.get(last.size() - 1).split("\"")[1] + "/";

		URL stepTwo = new URL(root + year);
		ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
		String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

		URL stepThree = new URL(root + year + hour);
		ArrayList<String> filePage = getOccurancesInHtml(stepThree,
				"href=\"pagecounts");
		String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

		URL theFileToBeDownloaded = new URL(root + year + hour + file);
		String fileWOExtension = file.replace(".gz", "");
		File zippedFile = new File(fileWOExtension + ".gz");
		File unzippedFile = new File(fileWOExtension);
		if (!unzippedFile.exists()) {
			InputStream in = null;
			OutputStream out = null;
			URLConnection con = null;

			out = new BufferedOutputStream(new FileOutputStream(zippedFile));
			con = theFileToBeDownloaded.openConnection();
			con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
			in = con.getInputStream();
			int length = Integer.parseInt(con.getHeaderFields()
					.get("Content-Length").get(0));

			byte[] buffer = new byte[1024];

			int numRead;
			long numWritten = 0;

			while ((numRead = in.read(buffer)) != -1) {
				out.write(buffer, 0, numRead);
				numWritten += numRead;
			}

			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}

			GZIPInputStream gzipInputStream = new GZIPInputStream(
					new FileInputStream(zippedFile));
			FileOutputStream fileOutputStream = new FileOutputStream(
					unzippedFile);

			int len = 0;
			int cum = 0;
			byte[] zipBuffer = new byte[1024];
			while ((len = gzipInputStream.read(zipBuffer)) != -1) {
				fileOutputStream.write(zipBuffer, 0, len);
			}

			gzipInputStream.close();
			fileOutputStream.close();
		}
		br = new BufferedReader(new FileReader(unzippedFile));
	}
}


Node-path: trunk/WikiWeb/src/RelevantLinks.java
Node-kind: file
Node-action: change
Text-content-length: 2568
Text-content-md5: 8476215df1001a88a9c54ef3e8f0748e
Text-content-sha1: dd89daa6ea3c262c9c690f81b2a7b0ad864800e8
Content-length: 2568

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelevantLinks {

    private ArrayList<WikiLink> relaventLinks;
    private DownloadStatisticProvider dsp;
    
    public RelevantLinks(URL url) throws Exception {
    	
    	dsp = new DownloadStatisticProvider();
    	
        try {
            URLConnection con = url.openConnection();
            BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String now;
            ArrayList<String> lines = new ArrayList<String>();

            ArrayList<String> a = null;
            while ((now = allHtml.readLine()) != null) {
                a = getLinks(now);

                if (a != null)
                    for (int i = 0; i < a.size(); i++) {
                        lines.add(a.get(i));
                    }
            }
            relaventLinks = getWikipediaLinks(lines);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String[] getTitleAndLink(String line) {
        String[] ar = line.split("\"");
        if (ar.length <= 2) {
            return null;
        }
        return new String[]{ar[2], ar[0]};
    }

    private static ArrayList<String> getLinks(String str) {
        if (!str.contains(WikiLink.STRING_SPLITTER))
            return null;

        ArrayList<String> s = new ArrayList<String>();
        String[] ar = str.split(WikiLink.STRING_SPLITTER);
        for (int i = 1; i < ar.length; i++) {
            s.add(ar[i]);
        }
        return s;
    }

    private ArrayList<WikiLink> getWikipediaLinks(ArrayList<String> lines) throws Exception {
        ArrayList<WikiLink> wl = new ArrayList<WikiLink>();

        for (int i = 0; i < lines.size(); i++) {
            String[] titleLink = getTitleAndLink(lines.get(i));
            if (titleLink != null) {
                try {
                    URL url = new URL(WikiLink.URL_HEAD + titleLink[1]);
                    wl.add(new WikiLink(titleLink[0], url, dsp.getPageView(titleLink[0])));
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

            }
        }
        return wl;
    }

    public ArrayList<WikiLink> getWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/Runner.java
Node-kind: file
Node-action: change
Text-content-length: 1747
Text-content-md5: 25faa39a57933b361aa18a360d8e78ae
Text-content-sha1: 3fc36393c07c265b7dc9f1b753f33b65ac7ad12a
Content-length: 1747

import javax.swing.*;
import java.util.ArrayList;

public class Runner extends JFrame {

    public Runner() {
        this.setSize(1000, 1000);
        this.setVisible(true);
    }

    public static void main(String args[]) throws Exception {
    	DownloadStatisticProvider.prep();
        WikiFilter f = new WikiFilter(addFilters());
        new WikiSearch("Software engineering", f).getFilteredWikipediaLinks();
    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString.add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        return filterString;
    }
}


Node-path: trunk/WikiWeb/src/Statistic.java
Node-kind: file
Node-action: add
Prop-content-length: 45
Text-content-length: 203
Text-content-md5: 6cd756c778ea8055342795f0f7ab41db
Text-content-sha1: 9d60b109161b65b66eb3efb07c4abb6908288260
Content-length: 248

K 13
svn:mime-type
V 10
text/plain
PROPS-END
public interface Statistic {

	public long getPageView(String wl) throws Exception;

	public boolean existingWord(String wordToCheck) throws Exception;

	public void prep() throws Exception;
}



Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1725
Text-content-md5: 9a19d46c067a902aa53f975cd0dc7adf
Text-content-sha1: 6a4bc961c8a737bfbac16b1a0e81e22660c2bc55
Content-length: 1725

import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;

    public WikiSearch(String pageTitle, long pageViewCount) throws Exception {
        super(pageTitle, pageViewCount);
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();
    }

    public WikiSearch(String pageTitle, WikiFilter filter) {
        super(pageTitle);
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();

    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();
        ArrayList<WikiLink> filteredList = new ArrayList<WikiLink>();

        if (filter.getFilters().size() < 1) {
            return unfilteredList; // TODO Move this up and call the method instead, avoid creating unn objs.
        }

        for (int i = 0; i < unfilteredList.size(); i++) {
            boolean add = true;
            for (int j = 0; j < filter.getFilters().size(); j++) {
                if (unfilteredList.get(i).getTitle().contains(filter.getFilters().get(j))) {
                    add = false;
                }
            }
            if (add)
                filteredList.add(unfilteredList.get(i));
        }

        System.out.println(filteredList);
        System.out.println(unfilteredList);

        return filteredList;

    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Revision-number: 31
Prop-content-length: 197
Content-length: 197

K 7
svn:log
V 88
Both sides of the project are working, now I just need to merge the two and add graphics
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-14T10:12:37.173391Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 5355
Text-content-md5: c2d356af2fd75f99cecc2a593873d2cc
Text-content-sha1: 7a86d7e371c0ae923a8aedba4af0c6dd10f0e893
Content-length: 5355

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private BufferedReader br;
    private FileReader fr;
    private long size;

    public DownloadStatisticProvider() throws Exception {
//		prep();
        fr = new FileReader("pagecounts-20130613-030000");
        br = new BufferedReader(fr);
        String line = null;
        while ((line = br.readLine()) != null) {
            size++;
        }
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    public long getSize() {
        return size;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        return s;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        String line = null;
        reset();
        while ((line = br.readLine()) != null) {

            if (line.contains(wordToCheck) && (line.contains("en "))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        String line = null;
        reset();
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                System.out.println(line);
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    @Override
    public void prep() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

        URL theFileToBeDownloaded = new URL(root + year + hour + file);
        String fileWOExtension = file.replace(".gz", "");
        File zippedFile = new File(fileWOExtension + ".gz");
        File unzippedFile = new File(fileWOExtension);
        if (!unzippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            int length = Integer.parseInt(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len = 0;
            byte[] zipBuffer = new byte[1024];
            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
            }

            gzipInputStream.close();
            fileOutputStream.close();
        }
        br = new BufferedReader(new FileReader(unzippedFile));
    }

    private void reset() throws FileNotFoundException {
        br = null;
        fr = null;
        fr = new FileReader("pagecounts-20130613-030000");
        br = new BufferedReader(fr);
    }
}


Node-path: trunk/WikiWeb/src/Idea
Node-kind: file
Node-action: change
Text-content-length: 302
Text-content-md5: fe8263295fecb546caea84d6fa9ea810
Text-content-sha1: 0cfd340278f9667b81453ff2113bbaa3d322236a
Content-length: 302

    Sort by: Page Counts
    X   Sort by: # of times that it appears on page
Add support for things other than text
Start your gui
Use the dump to index the search
Bold or "" things on page
Use the dump to offer suggestions
if statistics aren't varied enough, then maybe use all the languages.


Node-path: trunk/WikiWeb/src/RelevantLinks.java
Node-kind: file
Node-action: change
Text-content-length: 2658
Text-content-md5: ecae4d01c7c5738464e8bfbcc75040d3
Text-content-sha1: 2437ba1685edb467a7577b421809ea0ea75b4ae4
Content-length: 2658

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelevantLinks {

    private ArrayList<WikiLink> relaventLinks;
    private DownloadStatisticProvider dsp;

    public RelevantLinks(URL url) throws Exception {

        dsp = new DownloadStatisticProvider();

        try {
            URLConnection con = url.openConnection();
            BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String now;
            ArrayList<String> lines = new ArrayList<String>();

            ArrayList<String> a = null;
            while ((now = allHtml.readLine()) != null) {
                a = getLinks(now);

                if (a != null)
                    for (int i = 0; i < a.size(); i++) {
                        lines.add(a.get(i));
                    }
            }
            relaventLinks = getWikipediaLinks(lines);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String[] getTitleAndLink(String line) {
        String[] ar = line.split("\"");
        if (ar.length <= 2) {
            return null;
        }
        return new String[]{ar[2], ar[0]};
    }

    private static ArrayList<String> getLinks(String str) {
        if (!str.contains(WikiLink.STRING_SPLITTER))
            return null;

        ArrayList<String> s = new ArrayList<String>();
        String[] ar = str.split(WikiLink.STRING_SPLITTER);
        for (int i = 1; i < ar.length; i++) {
            s.add(ar[i]);
        }
        return s;
    }

    private ArrayList<WikiLink> getWikipediaLinks(ArrayList<String> lines) throws Exception {
        ArrayList<WikiLink> wl = new ArrayList<WikiLink>();

        for (int i = 0; i < lines.size(); i++) {
            String[] titleLink = getTitleAndLink(lines.get(i));
            if (titleLink != null) {
                try {
                    URL url = new URL(WikiLink.URL_HEAD + titleLink[1]);
                    WikiLink wikiLink = new WikiLink(titleLink[0], url);
//                    wikiLink.setPageVC(dsp.getPageView(wikiLink.getTitle()));
                    wl.add(wikiLink);
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

            }
        }
        return wl;
    }

    public ArrayList<WikiLink> getWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/TODO
Node-kind: file
Node-action: change
Text-content-length: 71
Text-content-md5: 9ed3d25821f1c41242cea96237301428
Text-content-sha1: 6043f87287639ecb73a91415fdb3f5d91de36b0b
Content-length: 71

All the exception handling
Consistent download strategy
Documentation?


Node-path: trunk/WikiWeb/src/Tester_DownloadStatisticProvider.java
Node-kind: file
Node-action: add
Node-copyfrom-rev: 30
Node-copyfrom-path: trunk/WikiWeb/src/Tester.java
Text-copy-source-md5: d7885388cb033f1738011ece98677329
Text-copy-source-sha1: 8ca76369a34a7486c4e891637f14a0307ca7c4e6
Prop-content-length: 45
Text-content-length: 987
Text-content-md5: c4d52c0aa1fc9069e1c175589a6a8618
Text-content-sha1: fa92856e9bd8c7456893425476bbaa688bb62633
Content-length: 1032

K 13
svn:mime-type
V 10
text/plain
PROPS-END
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Scanner;

public class Tester_DownloadStatisticProvider {
    public static void main(String[] args) throws Exception {
        DownloadStatisticProvider dsp = new DownloadStatisticProvider();
        System.out.println(dsp.getSize());
        Scanner sc = new Scanner(System.in);
        String s = "";
        while (!(s.equalsIgnoreCase("exit"))) {
            s = sc.nextLine();
            System.out.println(dsp.existingWord(s));
            System.out.println(dsp.getPageView(s));
            System.out.println("done");
        }
    }

    public static void main2(String[] args) throws IOException {

        RandomAccessFile raf = new RandomAccessFile(new File("pagecounts-20130613-030000"), "r");
        raf.seek(0);
        System.out.println(raf.readLine());
        raf.seek(Long.MAX_VALUE);
        System.out.println(raf.readLine());
    }
}


Node-path: trunk/WikiWeb/src/Tester_WikiSearch.java
Node-kind: file
Node-action: add
Node-copyfrom-rev: 30
Node-copyfrom-path: trunk/WikiWeb/src/Runner.java
Text-copy-source-md5: 25faa39a57933b361aa18a360d8e78ae
Text-copy-source-sha1: 3fc36393c07c265b7dc9f1b753f33b65ac7ad12a
Prop-content-length: 45
Text-content-length: 1757
Text-content-md5: 52aeef0e9ce329c7e7d3e1c252277cb6
Text-content-sha1: 2132d50650f85c71048475e4b3fc05c8bdfe0619
Content-length: 1802

K 13
svn:mime-type
V 10
text/plain
PROPS-END
import javax.swing.*;
import java.util.ArrayList;

public class Tester_WikiSearch {

    public static void main(String args[]) throws Exception {
        WikiFilter f = new WikiFilter(addFilters());
        WikiSearch wikiSearch = new WikiSearch("JVM", f);
        for (int i = 0; i < wikiSearch.getFilteredWikipediaLinks().size(); i++) {
            System.out.println(wikiSearch.getFilteredWikipediaLinks().get(i));
        }
    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString.add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        return filterString;
    }
}


Node-path: trunk/WikiWeb/src/WikiLink.java
Node-kind: file
Node-action: change
Text-content-length: 1182
Text-content-md5: 8a74dd600ff945df2bcd39c14485b7f7
Text-content-sha1: 37fa2f6c6cac34f7c343aeae53322d01feee7b5a
Content-length: 1182

import java.net.MalformedURLException;
import java.net.URL;

public class WikiLink {

    public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
    public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
    private String pageTitle;
    private URL url;
    private long pageVC = 0;

    public WikiLink(String pageTitle) {
        this.pageTitle = pageTitle;
        pageTitle = pageTitle.replace(" ", "_");//XXX should this be switched?
        try {
            url = new URL(URL_HEAD + pageTitle);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        pageVC = -1;
    }

    public WikiLink(String pageTitle, URL url) {
        this.pageTitle = pageTitle;
        this.url = url;
        pageVC = -1;
    }

    public String getTitle() {
        return pageTitle;
    }

    public URL getURL() {
        return url;
    }

    @Override
    public String toString() {
        return pageTitle + "\t" + " \t@\t " + url.toString();
    }

    public long getPageVC() {
        return pageVC;
    }

    public void setPageVC(long l) {
        pageVC = l;
    }

}


Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1617
Text-content-md5: ec655e39af3b5c807c8e5c247518ac70
Text-content-sha1: f484308f55238ed65817366269c38a0d5b1ba3c9
Content-length: 1617

import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;

    public WikiSearch(String pageTitle) throws Exception {
        super(pageTitle);
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();
    }

    public WikiSearch(String pageTitle, WikiFilter filter) throws Exception {
        super(pageTitle);
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();

    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();
        ArrayList<WikiLink> filteredList = new ArrayList<WikiLink>();

        if (filter.getFilters().size() < 1) {
            return unfilteredList; // TODO Move this up and call the method instead, avoid creating unn objs.
        }

        for (int i = 0; i < unfilteredList.size(); i++) {
            boolean add = true;
            for (int j = 0; j < filter.getFilters().size(); j++) {
                if (unfilteredList.get(i).getTitle().contains(filter.getFilters().get(j))) {
                    add = false;
                }
            }
            if (add)
                filteredList.add(unfilteredList.get(i));
        }

        return filteredList;

    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/Tester.java
Node-action: delete


Node-path: trunk/WikiWeb/src/Runner.java
Node-action: delete


Revision-number: 32
Prop-content-length: 116
Content-length: 116

K 7
svn:log
V 8
Comments
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-14T15:26:12.002922Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 5698
Text-content-md5: ad1cd318e583d625c895c5d3d3ffd330
Text-content-sha1: 1c6699e9b089f1a71aa9cc2c81f0b656dcc56827
Content-length: 5698

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private BufferedReader br;
    private FileReader fr;
    private long size;

    public DownloadStatisticProvider() throws Exception {
        prep();
//        fr = new FileReader("pagecounts-20130613-030000");
//        br = new BufferedReader(fr);
//        String line = null;
//        while ((line = br.readLine()) != null) {
//            size++;
//        }
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        return s;
    }

    public long getSize() {
        return size;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        String line = null;
        reset();
        while ((line = br.readLine()) != null) {

            if (line.contains(wordToCheck) && (line.contains("en "))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        String line = null;
        reset();
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                System.out.println(line);
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    @Override
    public void prep() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
//        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");
//
//        String year = last.get(last.size() - 1).split("\"")[1] + "/";
//
//        URL stepTwo = new URL(root + year);
//        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
//        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";
//
//        URL stepThree = new URL(root + year + hour);
//        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
//                "href=\"pagecounts");
//        String file = (filePage.get(filePage.size() - 1).split("\"")[1]);
//
//        URL theFileToBeDownloaded = new URL(root + year + hour + file);
//        String fileWOExtension = file.replace(".gz", "");
//        File zippedFile = new File(fileWOExtension + ".gz");
//        File unzippedFile = new File(fileWOExtension);
        File unzippedFile = new File("pagecount-20130613-030000");
//        if (!unzippedFile.exists()) {
//            InputStream in = null;
//            OutputStream out = null;
//            URLConnection con = null;
//
//            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
//            con = theFileToBeDownloaded.openConnection();
//            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
//            in = con.getInputStream();
//            int length = Integer.parseInt(con.getHeaderFields()
//                    .get("Content-Length").get(0));
//
            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

//            while ((numRead = in.read(buffer)) != -1) {
//                out.write(buffer, 0, numRead);
//                numWritten += numRead;
//            }
//
//            if (in != null) {
//                in.close();
//            }
//            if (out != null) {
//                out.close();
//            }

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream("pagecounts-20130613-030000.gz"));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len = 0;
            byte[] zipBuffer = new byte[1024];

            int i = 0;
            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                String line = new String(zipBuffer);
                i++;
                System.out.println(line+"\t"+i);
                    fileOutputStream.write(zipBuffer, 0, len);
            }

            gzipInputStream.close();
            fileOutputStream.close();
//        }
        br = new BufferedReader(new FileReader(unzippedFile));
    }

    private void reset() throws FileNotFoundException {
        br = null;
        fr = null;
        fr = new FileReader("pagecounts-20130613-030000");
        br = new BufferedReader(fr);
    }
}


Node-path: trunk/WikiWeb/src/Tester_DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 1005
Text-content-md5: c236fddb7b8dff46f5cfcb25ae16b965
Text-content-sha1: eb14482d15bc9f45c22c3bf192579fe542fce5c7
Content-length: 1005

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Scanner;

public class Tester_DownloadStatisticProvider {
    public static void main(String[] args) throws Exception {
        DownloadStatisticProvider dsp = new DownloadStatisticProvider();
//        System.out.println(dsp.getSize());
//        Scanner sc = new Scanner(System.in);
//        String s = "";
//        while (!(s.equalsIgnoreCase("exit"))) {
//            s = sc.nextLine();
//            System.out.println(dsp.existingWord(s));
//            System.out.println(dsp.getPageView(s));
//            System.out.println("done");
//        }
    }

    public static void main2(String[] args) throws IOException {

        RandomAccessFile raf = new RandomAccessFile(new File("pagecounts-20130613-030000"), "r");
        raf.seek(0);
        System.out.println(raf.readLine());
        raf.seek(Long.MAX_VALUE);
        System.out.println(raf.readLine());
    }
}


Revision-number: 33
Prop-content-length: 112
Content-length: 112

K 7
svn:log
V 4
work
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-14T17:22:55.540689Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: delete

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: add
Node-copyfrom-rev: 32
Node-copyfrom-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Text-copy-source-md5: ad1cd318e583d625c895c5d3d3ffd330
Text-copy-source-sha1: 1c6699e9b089f1a71aa9cc2c81f0b656dcc56827
Text-content-length: 6134
Text-content-md5: bc14eeb451bf06019f3d681960b16c7a
Text-content-sha1: ec53cafff6f6417ed7ac3b08376f5aa7d043d488
Content-length: 6134

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

	private BufferedReader br;
	private FileReader fr;
	private long downloadedTextFileSize;
	private File unzippedFile, zippedFile, finalEnglishFile;

	public DownloadStatisticProvider() throws Exception {
		prep();
		fr = new FileReader("pagecounts-20130613-030000");
		br = new BufferedReader(fr);
		String line = null;
	}

	private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
			throws Exception {
		URLConnection con = url.openConnection();
		con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
		Thread.sleep(1000);
		BufferedReader allHtml = new BufferedReader(new InputStreamReader(
				con.getInputStream()));
		String now;
		ArrayList<String> lines = new ArrayList<String>();

		while ((now = allHtml.readLine()) != null) {
			if (now.contains(spl))
				lines.add(now);
		}
		ArrayList<String> split = new ArrayList<String>();
		for (int i = 0; i < lines.size(); i++) {
			String[] arr = lines.get(i).split(spl);
			for (int j = 1; j < arr.length; j++) {
				split.add(spl + arr[1]);
			}
		}
		return split;
	}

	private static String fixString(String string) {
		String s = string;
		s.replace("%20", " ");
		s.replace("%27", "'");
		return s;
	}

	public long getSize() {
		return downloadedTextFileSize;
	}

	@Override
	public boolean existingWord(String wordToCheck) throws Exception {
		String line = null;
		reset();
		while ((line = br.readLine()) != null) {

			if (line.contains(wordToCheck) && (line.contains("en "))) {
				return true;
			}
		}
		return false;
	}

	@Override
	public long getPageView(String wl) throws Exception {
		String line = null;
		reset();
		long num = 0;
		while ((line = br.readLine()) != null) {
			line = fixString(line);
			String[] data = line.split(" ");
			if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
				System.out.println(line);
				num += Integer.parseInt(data[2]);
			}
		}
		return num;
	}

	@Override
	public void prep() throws Exception {
		String root = "http:dumps.wikimedia.org/other/pagecounts-raw/";
		URL stepOne = new URL(root);
		ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

		String year = last.get(last.size() - 1).split("\"")[1] + "/";

		URL stepTwo = new URL(root + year);
		ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
		String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

		URL stepThree = new URL(root + year + hour);
		ArrayList<String> filePage = getOccurancesInHtml(stepThree,
				"href=\"pagecounts");
		String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

		URL theFileToBeDownloaded = new URL(root + year + hour + file);
		String fileWOExtension = file.replace(".gz", "");
		zippedFile = new File(fileWOExtension + ".gz");
		unzippedFile = new File(fileWOExtension);
		// File unzippedFile = new File("pagecount-20130613-030000");
		if (!unzippedFile.exists()) {
			InputStream in = null;
			OutputStream out = null;
			URLConnection con = null;

			out = new BufferedOutputStream(new FileOutputStream(zippedFile));
			con = theFileToBeDownloaded.openConnection();
			con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
			in = con.getInputStream();
			long length = Long.parseLong(con.getHeaderFields()
					.get("Content-Length").get(0));

			byte[] buffer = new byte[1024];

			int numRead;
			long numWritten = 0;

			while ((numRead = in.read(buffer)) != -1) {
				out.write(buffer, 0, numRead);
				informAboutDownload(numWritten, length);
				numWritten += numRead;
			}

			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}

			GZIPInputStream gzipInputStream = new GZIPInputStream(
					new FileInputStream(zippedFile));
			FileOutputStream fileOutputStream = new FileOutputStream(
					unzippedFile);

			int len = 0;
			byte[] zipBuffer = new byte[1024];

			int i = 0;
			while ((len = gzipInputStream.read(zipBuffer)) != -1) {
				// String line = new String(zipBuffer);
				// i++;
				// System.out.println(line + "\t" + i);
				fileOutputStream.write(zipBuffer, 0, len);
				informAboutUnzipStart();
			}
			informAboutUnzipStop();

			gzipInputStream.close();
			fileOutputStream.close();

			br = new BufferedReader(new FileReader(unzippedFile));
			// String line;
			// while ((line = br.readLine()) != null) {
			// downloadSize++;
			// }

			for (String line = br.readLine(); line != null; line = br
					.readLine()) {
				downloadedTextFileSize++;
			}

			FileOutputStream finalEnglishFile = new FileOutputStream("en-"
					+ unzippedFile.toString());
			reset();
			for (String line = br.readLine(); line != null; line = br
					.readLine()) {
				String[] data = line.split(" ");
				if (data[0].equals("en")) {
					finalEnglishFile.write(line.getBytes());
				}
				informAboutRewrite(i, downloadedTextFileSize);
			}
		}
	}

	private void informAboutUnzipStop() {
		System.out.println("STOP");
	}

	private void informAboutUnzipStart() {
		System.out.println("Start");
	}

	private void informAboutDownload(long status, long outOf) {
		System.out.println("Downloading Dump:\t"
				+ (((double) status / (double) outOf) * 100) + "%");
	}

	private void informAboutRewrite(long status, long outOf) {
		System.out.println("Rewrite Dump:\t"
				+ (((double) status / (double) outOf) * 100) + "%");
	}

	private void reset() throws FileNotFoundException {
		br = null;
		fr = null;
		fr = new FileReader(unzippedFile);
		br = new BufferedReader(fr);
	}
}




Revision-number: 34
Prop-content-length: 135
Content-length: 135

K 7
svn:log
V 26
Download Script is working
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-14T18:07:18.451158Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 7362
Text-content-md5: 4ef66b023c2955c70331772aec76fba7
Text-content-sha1: 78ad7e7f972d5d2d8c2407399f89d38eb57ddaf4
Content-length: 7362

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private BufferedReader br;
    private FileReader fr;
    private long downloadedTextFileSize;
    private File unzippedFile, zippedFile, finalEnglishFile;

    public DownloadStatisticProvider() throws Exception {
        prep();
        reset();
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        return s;
    }

    public long getSize() {
        return downloadedTextFileSize;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        String line = null;
        reset();
        while ((line = br.readLine()) != null) {

            if (line.contains(wordToCheck) && (line.contains("en "))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        String line = null;
        reset();
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                System.out.println(line);
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    @Override
    public void prep() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

        URL theFileToBeDownloaded = new URL(root + year + hour + file);
        String fileWOExtension = file.replace(".gz", "");
        zippedFile = new File(fileWOExtension + ".gz");
        unzippedFile = new File(fileWOExtension);
        // File unzippedFile = new File("pagecount-20130613-030000");
        if (!unzippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            long length = Long.parseLong(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                informAboutDownload(numWritten, length);
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len = 0;
            byte[] zipBuffer = new byte[1024];

            int i = 0;
            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                // String line = new String(zipBuffer);
                // i++;
                // System.out.println(line + "\t" + i);
                fileOutputStream.write(zipBuffer, 0, len);
                informAboutUnzipStart();
            }
            informAboutUnzipStop();

            gzipInputStream.close();
            fileOutputStream.close();

            br = new BufferedReader(new FileReader(unzippedFile));
            // String line;
            // while ((line = br.readLine()) != null) {
            // downloadSize++;
            // }

            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                downloadedTextFileSize++;
            }

            FileOutputStream finalEnglishFile = new FileOutputStream("en-"
                    + unzippedFile.toString());
            reset();
            int j =0;
            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                String[] data = line.split(" ");
                if (data[0].equals("en")) {
                    finalEnglishFile.write(line.getBytes());
                }

                informAboutRewrite(j++, downloadedTextFileSize);
            }

            finalEnglishFile.close();
        }
    }

    private void informAboutUnzipStop() {
        System.out.println("STOP");
    }

    private void informAboutUnzipStart() {
        System.out.println("Start");
    }

    private void informAboutDownload(long status, long outOf) {
        System.out.println("Downloading Dump:\t"
                + (((double) status / (double) outOf) * 100) + "%");
    }

    private void informAboutRewrite(long status, long outOf) {
        System.out.println("Rewrite Dump:\t"
                + (((double) status / (double) outOf) * 100) + "%");
    }

    private void reset() throws FileNotFoundException {
        br = null;
        fr = null;
        fr = new FileReader(unzippedFile);
        br = new BufferedReader(fr);
    }
}

Revision-number: 35
Prop-content-length: 129
Content-length: 129

K 7
svn:log
V 20
Name in the comments
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-14T18:10:08.457392Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 7101
Text-content-md5: 53b689d459f3dcefe6ff75755d52d495
Text-content-sha1: b65b2e9cbb4d88aa859a27253ddf01cd36f4cc83
Content-length: 7101

/**
 * @author Parth Mehrotra
 */

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private BufferedReader br;
    private FileReader fr;
    private long downloadedTextFileSize;
    private File unzippedFile, zippedFile, finalEnglishFile;

    public DownloadStatisticProvider() throws Exception {
        prep();
        reset();
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        return s;
    }

    public long getSize() {
        return downloadedTextFileSize;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        String line = null;
        reset();
        while ((line = br.readLine()) != null) {

            if (line.contains(wordToCheck) && (line.contains("en "))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        String line = null;
        reset();
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                System.out.println(line);
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    @Override
    public void prep() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        String file = (filePage.get(filePage.size() - 1).split("\"")[1]);

        URL theFileToBeDownloaded = new URL(root + year + hour + file);
        String fileWOExtension = file.replace(".gz", "");
        zippedFile = new File(fileWOExtension + ".gz");
        unzippedFile = new File(fileWOExtension);
        // File unzippedFile = new File("pagecount-20130613-030000");
        if (!unzippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            long length = Long.parseLong(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                informAboutDownload(numWritten, length);
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len = 0;
            byte[] zipBuffer = new byte[1024];

            int i = 0;
            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                // String line = new String(zipBuffer);
                // i++;
                // System.out.println(line + "\t" + i);
                fileOutputStream.write(zipBuffer, 0, len);
                informAboutUnzipStart();
            }
            informAboutUnzipStop();

            gzipInputStream.close();
            fileOutputStream.close();

            br = new BufferedReader(new FileReader(unzippedFile));
            // String line;
            // while ((line = br.readLine()) != null) {
            // downloadSize++;
            // }

            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                downloadedTextFileSize++;
            }

            FileOutputStream finalEnglishFile = new FileOutputStream("en-"
                    + unzippedFile.toString());
            reset();
            int j = 0;
            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                String[] data = line.split(" ");
                if (data[0].equals("en")) {
                    finalEnglishFile.write(line.getBytes());
                }

                informAboutRewrite(j++, downloadedTextFileSize);
            }

            finalEnglishFile.close();
        }
    }

    private void informAboutUnzipStop() {
        System.out.println("STOP");
    }

    private void informAboutUnzipStart() {
        System.out.println("Start");
    }

    private void informAboutDownload(long status, long outOf) {
        System.out.println("Downloading Dump:\t"
                + (((double) status / (double) outOf) * 100) + "%");
    }

    private void informAboutRewrite(long status, long outOf) {
        System.out.println("Rewrite Dump:\t"
                + (((double) status / (double) outOf) * 100) + "%");
    }

    private void reset() throws FileNotFoundException {
        br = null;
        fr = null;
        fr = new FileReader(unzippedFile);
        br = new BufferedReader(fr);
    }
}

Node-path: trunk/WikiWeb/src/RelevantLinks.java
Node-kind: file
Node-action: change
Text-content-length: 2697
Text-content-md5: 27dadddd3ab26b4bf7a5c3f36536535d
Text-content-sha1: 03cf8056f85f5c61ead8aca0cbc423a776a18021
Content-length: 2697

/**
 * @author Parth Mehrotra
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelevantLinks {

    private ArrayList<WikiLink> relaventLinks;
    private DownloadStatisticProvider dsp;

    public RelevantLinks(URL url) throws Exception {

        dsp = new DownloadStatisticProvider();

        try {
            URLConnection con = url.openConnection();
            BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String now;
            ArrayList<String> lines = new ArrayList<String>();

            ArrayList<String> a = null;
            while ((now = allHtml.readLine()) != null) {
                a = getLinks(now);

                if (a != null)
                    for (int i = 0; i < a.size(); i++) {
                        lines.add(a.get(i));
                    }
            }
            relaventLinks = getWikipediaLinks(lines);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String[] getTitleAndLink(String line) {
        String[] ar = line.split("\"");
        if (ar.length <= 2) {
            return null;
        }
        return new String[]{ar[2], ar[0]};
    }

    private static ArrayList<String> getLinks(String str) {
        if (!str.contains(WikiLink.STRING_SPLITTER))
            return null;

        ArrayList<String> s = new ArrayList<String>();
        String[] ar = str.split(WikiLink.STRING_SPLITTER);
        for (int i = 1; i < ar.length; i++) {
            s.add(ar[i]);
        }
        return s;
    }

    private ArrayList<WikiLink> getWikipediaLinks(ArrayList<String> lines) throws Exception {
        ArrayList<WikiLink> wl = new ArrayList<WikiLink>();

        for (int i = 0; i < lines.size(); i++) {
            String[] titleLink = getTitleAndLink(lines.get(i));
            if (titleLink != null) {
                try {
                    URL url = new URL(WikiLink.URL_HEAD + titleLink[1]);
                    WikiLink wikiLink = new WikiLink(titleLink[0], url);
//                    wikiLink.setPageVC(dsp.getPageView(wikiLink.getTitle()));
                    wl.add(wikiLink);
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

            }
        }
        return wl;
    }

    public ArrayList<WikiLink> getWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/Statistic.java
Node-kind: file
Node-action: change
Text-content-length: 249
Text-content-md5: a93d3b9545f70d852a8b65bbcf18b43d
Text-content-sha1: 140fdf54216e2f6e985ef2db749cd4adff2949ba
Content-length: 249

/**
 * @author Parth Mehrotra
 */
public interface Statistic {

    public long getPageView(String wl) throws Exception;

    public boolean existingWord(String wordToCheck) throws Exception;

    public void prep() throws Exception;
}



Node-path: trunk/WikiWeb/src/TODO
Node-kind: file
Node-action: change
Text-content-length: 70
Text-content-md5: 5a5c40a1e2455cc0cf3c482ccac49c1b
Text-content-sha1: 4821316f303b0a2cf2a7233a49e59258028395b3
Content-length: 70

All the exception handling
Consistent download strategy
Documentation


Node-path: trunk/WikiWeb/src/Tester_DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 1017
Text-content-md5: 37eceec08603bcf82ad8b92d2e43b59f
Text-content-sha1: 4d0563ffc82e07f7263fcf329bd38da3d5cdb89b
Content-length: 1017

/**
 * @author Parth Mehrotra
 */

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;

public class Tester_DownloadStatisticProvider {
    public static void main(String[] args) throws Exception {
        DownloadStatisticProvider dsp = new DownloadStatisticProvider();
//        System.out.println(dsp.getSize());
//        Scanner sc = new Scanner(System.in);
//        String s = "";
//        while (!(s.equalsIgnoreCase("exit"))) {
//            s = sc.nextLine();
//            System.out.println(dsp.existingWord(s));
//            System.out.println(dsp.getPageView(s));
//            System.out.println("done");
//        }
    }

    public static void main2(String[] args) throws IOException {

        RandomAccessFile raf = new RandomAccessFile(new File("pagecounts-20130613-030000"), "r");
        raf.seek(0);
        System.out.println(raf.readLine());
        raf.seek(Long.MAX_VALUE);
        System.out.println(raf.readLine());
    }
}


Node-path: trunk/WikiWeb/src/Tester_WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1773
Text-content-md5: 36ae05e8276acd4fe1c6d0d1fd10acef
Text-content-sha1: 93080ca86dba5723c2c2d60a47c68042da877df9
Content-length: 1773

/**
 * @author Parth Mehrotra
 */

import java.util.ArrayList;

public class Tester_WikiSearch {

    public static void main(String args[]) throws Exception {
        WikiFilter f = new WikiFilter(addFilters());
        WikiSearch wikiSearch = new WikiSearch("JVM", f);
        for (int i = 0; i < wikiSearch.getFilteredWikipediaLinks().size(); i++) {
            System.out.println(wikiSearch.getFilteredWikipediaLinks().get(i));
        }
    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString.add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        return filterString;
    }
}


Node-path: trunk/WikiWeb/src/WikiFilter.java
Node-kind: file
Node-action: change
Text-content-length: 560
Text-content-md5: 26910a8d63d8aeecc0ac32654b732db2
Text-content-sha1: a04e63732043928c83ec0a102d29a3ba86a96804
Content-length: 560

/**
 * @author Parth Mehrotra
 */

import java.util.ArrayList;

/**
 * Created with IntelliJ IDEA.
 * User: parthmehrotra
 * Date: 6/12/13
 * Time: 2:02 PM
 * To change this template use File | Settings | File Templates.
 */
public class WikiFilter {
    private ArrayList<String> filters = new ArrayList<String>();

    //TODO Empty Parameter method.

    public WikiFilter(ArrayList<String> filters) {
        this.filters = filters;
    }

    public ArrayList<String> getFilters() {
        return filters;
    }

    //TODO Add/remove all those methods
}


Node-path: trunk/WikiWeb/src/WikiLink.java
Node-kind: file
Node-action: change
Text-content-length: 1221
Text-content-md5: 734e1ef0f9db042a39c0d32d6a8797d9
Text-content-sha1: 0c99b0a3c99795d68a7fae6a8241cb8badac5b4e
Content-length: 1221

/**
 * @author Parth Mehrotra
 */

import java.net.MalformedURLException;
import java.net.URL;

public class WikiLink {

    public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
    public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
    private String pageTitle;
    private URL url;
    private long pageVC = 0;

    public WikiLink(String pageTitle) {
        this.pageTitle = pageTitle;
        pageTitle = pageTitle.replace(" ", "_");//XXX should this be switched?
        try {
            url = new URL(URL_HEAD + pageTitle);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        pageVC = -1;
    }

    public WikiLink(String pageTitle, URL url) {
        this.pageTitle = pageTitle;
        this.url = url;
        pageVC = -1;
    }

    public String getTitle() {
        return pageTitle;
    }

    public URL getURL() {
        return url;
    }

    @Override
    public String toString() {
        return pageTitle + "\t" + " \t@\t " + url.toString();
    }

    public long getPageVC() {
        return pageVC;
    }

    public void setPageVC(long l) {
        pageVC = l;
    }

}


Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1656
Text-content-md5: 925cd50307a19608f48cc8bf12f145ce
Text-content-sha1: 35af64065b857d6ca5d991652c47c2799ef98e8c
Content-length: 1656

/**
 * @author Parth Mehrotra
 */

import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;

    public WikiSearch(String pageTitle) throws Exception {
        super(pageTitle);
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();
    }

    public WikiSearch(String pageTitle, WikiFilter filter) throws Exception {
        super(pageTitle);
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL());

        ArrayList<WikiLink> al = relaventLinks.getWikipediaLinks();

    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();
        ArrayList<WikiLink> filteredList = new ArrayList<WikiLink>();

        if (filter.getFilters().size() < 1) {
            return unfilteredList; // TODO Move this up and call the method instead, avoid creating unn objs.
        }

        for (int i = 0; i < unfilteredList.size(); i++) {
            boolean add = true;
            for (int j = 0; j < filter.getFilters().size(); j++) {
                if (unfilteredList.get(i).getTitle().contains(filter.getFilters().get(j))) {
                    add = false;
                }
            }
            if (add)
                filteredList.add(unfilteredList.get(i));
        }

        return filteredList;

    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Revision-number: 36
Prop-content-length: 170
Content-length: 170

K 7
svn:log
V 61
Both sides of the project are working, now time for the merge
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-16T19:33:35.728298Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 7368
Text-content-md5: 776493901192e76e7ee61039a899b375
Text-content-sha1: 46ac10a058c26a8ae338596d91dc46157d8e5679
Content-length: 7368

/**
 * @author Parth Mehrotra
 */

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private long downloadedTextFileSize;
    private File unzippedFile, zippedFile, finalEnglishQueryFile;

    public DownloadStatisticProvider() throws Exception {
        System.out.println(getMostRecentName());
        prep();
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        return s;
    }

    public long getSize() {
        return downloadedTextFileSize;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line;
        while ((line = br.readLine()) != null) {

            if (line.contains(wordToCheck) && (line.contains("en "))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line = null;
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                System.out.println(line);
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    private String[] getMostRecentName() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        return new String[]{root, year, hour, (filePage.get(filePage.size() - 1).split("\"")[1])};
    }

    @Override
    public void prep() throws Exception {
        BufferedReader br;
//        String file = getMostRecentName();
        String[] file = {"http://localhost/", "xampp/", "learning/", "pagecounts-20130616-170004.gz"};
        URL theFileToBeDownloaded = new URL(file[0] + file[1] + file[2] + file[3]);
        String fileWOExtension = file[3].replace(".gz", "");
        zippedFile = new File(fileWOExtension + ".gz");
        unzippedFile = new File(fileWOExtension);
        // File unzippedFile = new File("pagecount-20130613-030000");
        if (!zippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            long length = Long.parseLong(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                informAboutDownload(numWritten, length);
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }

        if (!unzippedFile.exists()) {

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len;
            byte[] zipBuffer = new byte[1024];

            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
                informAboutUnzipStart();
            }
            gzipInputStream.close();
            fileOutputStream.close();
        }

        LineNumberReader lnr = new LineNumberReader(new FileReader(unzippedFile));
        lnr.skip(Long.MAX_VALUE);
        downloadedTextFileSize = lnr.getLineNumber();

        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
        if (!finalEnglishQueryFile.exists()) {
            br = new BufferedReader(new FileReader(unzippedFile));
            FileOutputStream finalEnglishFile = new FileOutputStream("en-"
                    + unzippedFile.toString());
            int j = 0;
            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                String[] data = line.split(" ");
                if (data[0].equals("en")) {
                    line += "\n";
                    finalEnglishFile.write(line.getBytes());
                }

                informAboutRewrite(j++, downloadedTextFileSize);
            }

            finalEnglishFile.close();
        }
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
        br = new BufferedReader(new FileReader(finalEnglishQueryFile));
    }

    private void informAboutUnzipStop() {
        System.out.println("Done unzipping file!");
    }

    private void informAboutUnzipStart() {
        System.out.println("Unzipping File... May take some time");
    }

    private void informAboutDownload(long status, long outOf) {
        System.out.println("Downloading Dump:\t"
                + (((double) status / (double) outOf) * 100) + "%");
    }

    private void informAboutRewrite(long status, long outOf) {
        System.out.println("Rewrite Dump:\t"
                + (((double) status / (double) outOf) * 100) + "%");
    }
}

Node-path: trunk/WikiWeb/src/PROGRESS-REPORT
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1005
Text-content-md5: e9f213bf6e6212d0073d9bd379ff8582
Text-content-sha1: 34f8261ba0690bc6384639abc465a3849eff4dd6
Content-length: 1015

PROPS-END
This week I successfully got the dump file to download. I can queary it and find out wether it exists and if it does, how many views it had for that hour. I don't want to make the user download the file everytime they want to use the application but I'm running into some bugs when I try to reference the file that already exists. Over this weekend, I'll do alot of planning so I can finally add the graphics. I also implemented filters into the search logic to exclude things like images, or Wikipedia's infamous "citation-needed" link.

To run this project:
There are two main classes. One that retrieves all the links (Tester_WikiSearch) this works flawlessly (thus far) and takes into account some filters, the other attempts to download the dump file and remove the non english portions and give information back.
-(Tester_WikiSearch) ready -  get's the links from the articles
-(Tester_DownloadStatisticProvider) almost ready - get's download information.
-(Runner) comming soon - graphical element.

Node-path: trunk/WikiWeb/src/Tester_DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 1070
Text-content-md5: ee8a000f6f5d92c4c991d0dd79528d1e
Text-content-sha1: 6f01fb6db2f1a31f98a0d8338e41aae21849fefe
Content-length: 1070

/**
 * @author Parth Mehrotra
 */

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Scanner;

public class Tester_DownloadStatisticProvider {
    public static void main(String[] args) throws Exception {
        DownloadStatisticProvider dsp = new DownloadStatisticProvider();
        System.out.println(dsp.getSize());
        Scanner sc = new Scanner(System.in);
        String s = "";
        while (!(s.equalsIgnoreCase("exit"))) {
            s = sc.nextLine();
            System.out.println("Start");
//            System.out.println(dsp.existingWord(s));
            System.out.println(dsp.getPageView(s));
            System.out.println("done");
        }
    }

    public static void main2(String[] args) throws IOException {

        RandomAccessFile raf = new RandomAccessFile(new File("pagecounts-20130613-030000"), "r");
        raf.seek(0);
        System.out.println(raf.readLine());
        raf.seek(Long.MAX_VALUE);
        System.out.println(raf.readLine());
    }
}


Node-path: trunk/WikiWeb/src/Tester_WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1982
Text-content-md5: d5af035221f9159654d74da24eb0bd42
Text-content-sha1: 13b590d5483e5a5e3f6d59d85ab3ec9c0e85a936
Content-length: 1982

/**
 * @author Parth Mehrotra
 */

import java.util.ArrayList;
import java.util.Scanner;

public class Tester_WikiSearch {

    public static void main(String args[]) throws Exception {
        WikiFilter f = new WikiFilter(addFilters());
        Scanner sc = new Scanner(System.in);
        for (String input = sc.nextLine(); !input.equalsIgnoreCase("exit"); input = sc.nextLine()) {
            WikiSearch wikiSearch = new WikiSearch(input, f);
            for (int i = 0; i < wikiSearch.getFilteredWikipediaLinks().size(); i++) {
                System.out.println("\t" + wikiSearch.getFilteredWikipediaLinks().get(i));
            }
        }
    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString.add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        return filterString;
    }
}


Revision-number: 37
Prop-content-length: 165
Content-length: 165

K 7
svn:log
V 56
Added callback methods for updating the download status

K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-16T23:09:24.921088Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 8179
Text-content-md5: 2a75ef939ee940c9bb5ce1cd15535662
Text-content-sha1: 53045704c537e638886e22c18da6d45c2a43f0fa
Content-length: 8179

/**
 * @author Parth Mehrotra
 */

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private long downloadedTextFileSize;
    private File unzippedFile, zippedFile, finalEnglishQueryFile;
    private String[] downloadURLInfo;
    private DownloadUpdater downloadUpdater;
    private double overallStatus;

    public DownloadStatisticProvider() throws Exception {

//        downloadURLInfo = getMostRecentName();
        downloadURLInfo = new String[]{"http://localhost/", "xampp/", "learning/", "pagecounts-20130616-170004.gz"};
        String fileWOExtension = downloadURLInfo[3].replace(".gz", "");
        zippedFile = new File(fileWOExtension + ".gz");
        unzippedFile = new File(fileWOExtension);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());

    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        return s;
    }

    public void attachDownloadUpdater(DownloadUpdater downloadUpdater) {
        this.downloadUpdater = downloadUpdater;
        downloadUpdater.processStarted();
        try {
            prep();
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        downloadUpdater.processFinished();
    }

    public long getSize() {
        return downloadedTextFileSize;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line;
        while ((line = br.readLine()) != null) {

            if (line.contains(wordToCheck) && (line.contains("en "))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line = null;
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    private String[] getMostRecentName() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        return new String[]{root, year, hour, (filePage.get(filePage.size() - 1).split("\"")[1])};
    }

    @Override
    public void prep() throws Exception {
        BufferedReader br;
        URL theFileToBeDownloaded = new URL(downloadURLInfo[0] + downloadURLInfo[1] + downloadURLInfo[2] + downloadURLInfo[3]);
        if (!zippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            long length = Long.parseLong(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            downloadUpdater.downloadStarted();
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                downloadUpdater.setDownloadStatus((double) numWritten / (double) length);
                overallStatus += (((double) numWritten) * (1f / 3f)) / (double) length;
                downloadUpdater.setOverallStatus(overallStatus);
                numWritten += numRead;
            }
            downloadUpdater.setOverallStatus(1f / 3f);

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            downloadUpdater.downloadFinished();
        } else {
            downloadUpdater.downloadUnnessisary();
            downloadUpdater.setOverallStatus(1f / 3f);
        }

        if (!unzippedFile.exists()) {

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len;
            byte[] zipBuffer = new byte[1024];

            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
                downloadUpdater.setUnzipStatus(.50);
                downloadUpdater.setOverallStatus((1f / 3f) + (1f / 2f));
            }
            gzipInputStream.close();
            fileOutputStream.close();
        } else {
            downloadUpdater.unzipUnnessisary();
        }
        downloadUpdater.setUnzipStatus(1d);
        downloadUpdater.setDownloadStatus(1d);
        downloadUpdater.setOverallStatus(2d / 3d);

        LineNumberReader lnr = new LineNumberReader(new FileReader(unzippedFile));
        lnr.skip(Long.MAX_VALUE);
        downloadedTextFileSize = lnr.getLineNumber();

        if (!finalEnglishQueryFile.exists()) {
            br = new BufferedReader(new FileReader(unzippedFile));
            FileOutputStream finalEnglishFile = new FileOutputStream("en-"
                    + unzippedFile.toString());
            int j = 0;
            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                String[] data = line.split(" ");
                if (data[0].equals("en")) {
                    line += "\n";
                    finalEnglishFile.write(line.getBytes());
                }

                downloadUpdater.setReWriteStatus((double) j++ / (double) downloadedTextFileSize);
                downloadUpdater.setOverallStatus((2d / 3d) + ((double) j / (double) downloadedTextFileSize));
            }
            finalEnglishFile.close();
        } else {
            downloadUpdater.reWriteUnnessisary();
        }
        downloadUpdater.setReWriteStatus(1d);
        downloadUpdater.setOverallStatus(1d);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
    }
}

Node-path: trunk/WikiWeb/src/DownloadUpdater.java
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 496
Text-content-md5: 7cbf6e275e10c1f23afb7341eb981c3f
Text-content-sha1: 226885ecfd3ec7e369e3365ca922aa2a68e678e0
Content-length: 506

PROPS-END
public interface DownloadUpdater {
    public void downloadStarted();

    public void setOverallStatus(double status);

    public void setDownloadStatus(double status);

    public void setUnzipStatus(double status);

    public void setReWriteStatus(double status);

    public void downloadFinished();

    public void downloadUnnessisary();

    public void unzipUnnessisary();

    public void reWriteUnnessisary();

    public void processStarted();

    public void processFinished();

}


Node-path: trunk/WikiWeb/src/RelevantLinks.java
Node-kind: file
Node-action: change
Text-content-length: 2647
Text-content-md5: 0a215f5fdbab05866615cfb89915142b
Text-content-sha1: 400a96e3c7ddcaee87ec38f05a39c4c8ebc477ff
Content-length: 2647

/**
 * @author Parth Mehrotra
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelevantLinks {

    private ArrayList<WikiLink> relaventLinks;
    private DownloadStatisticProvider dsp;

    public RelevantLinks(URL url) throws Exception {

        try {
            URLConnection con = url.openConnection();
            BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String now;
            ArrayList<String> lines = new ArrayList<String>();

            ArrayList<String> a = null;
            while ((now = allHtml.readLine()) != null) {
                a = getLinks(now);

                if (a != null)
                    for (int i = 0; i < a.size(); i++) {
                        lines.add(a.get(i));
                    }
            }
            relaventLinks = getWikipediaLinks(lines);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String[] getTitleAndLink(String line) {
        String[] ar = line.split("\"");
        if (ar.length <= 2) {
            return null;
        }
        return new String[]{ar[2], ar[0]};
    }

    private static ArrayList<String> getLinks(String str) {
        if (!str.contains(WikiLink.STRING_SPLITTER))
            return null;

        ArrayList<String> s = new ArrayList<String>();
        String[] ar = str.split(WikiLink.STRING_SPLITTER);
        for (int i = 1; i < ar.length; i++) {
            s.add(ar[i]);
        }
        return s;
    }

    private ArrayList<WikiLink> getWikipediaLinks(ArrayList<String> lines) throws Exception {
        ArrayList<WikiLink> wl = new ArrayList<WikiLink>();

        for (int i = 0; i < lines.size(); i++) {
            String[] titleLink = getTitleAndLink(lines.get(i));
            if (titleLink != null) {
                try {
                    URL url = new URL(WikiLink.URL_HEAD + titleLink[1]);
                    WikiLink wikiLink = new WikiLink(titleLink[0], url);
//                    wikiLink.setPageVC(dsp.getPageView(wikiLink.getTitle()));
                    wl.add(wikiLink);
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

            }
        }
        return wl;
    }

    public ArrayList<WikiLink> getWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/Tester_DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 2201
Text-content-md5: e73d3d0f461260c793dc57650022bcb9
Text-content-sha1: 1eb90063c6126ccfaf89022c878c18ab8d3361e7
Content-length: 2201

/**
 * @author Parth Mehrotra
 */

import java.util.Scanner;

public class Tester_DownloadStatisticProvider implements DownloadUpdater {
    DownloadStatisticProvider dsp;
    public Tester_DownloadStatisticProvider() throws Exception {
        dsp= new DownloadStatisticProvider();
        dsp.attachDownloadUpdater(this);
    }

    public static void main(String[] args) throws Exception {
        new Tester_DownloadStatisticProvider();
    }

    @Override
    public void downloadStarted() {
        System.out.println("Download Has Begun...");
    }

    @Override
    public void setOverallStatus(double status) {
        System.out.println("Overall Status: " + (status * 100) + "%");
    }

    @Override
    public void setDownloadStatus(double status) {
        System.out.println("Download Status: " + (status * 100) + "%");
    }

    @Override
    public void setUnzipStatus(double status) {
        System.out.println("Unzip Status: " + (status * 100) + "%");
    }


    @Override
    public void setReWriteStatus(double status) {
        System.out.println("Rewrite Status: " + (status * 100) + "%");
    }

    @Override
    public void downloadFinished() {
        System.out.println("Download Finished");
    }

    @Override
    public void downloadUnnessisary() {
        System.out.println("Down Unn");
    }

    @Override
    public void unzipUnnessisary() {
        System.out.println("zip unn");
    }

    @Override
    public void reWriteUnnessisary() {
        System.out.println("zip unn");
    }

    @Override
    public void processStarted() {
        System.out.println("Process Started");
    }

    @Override
    public void processFinished() {
        System.out.println("Process Finished");
        Scanner sc = new Scanner(System.in);
        for (String in = sc.nextLine(); !in.equalsIgnoreCase("exit"); in=sc.nextLine()) {
            try {
                System.out.println(dsp.getPageView(in));
            } catch (Exception e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }
        }
    }
}


Node-path: trunk/WikiWeb/src/WikiWebLauncher.java
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 561
Text-content-md5: c01752a4409f9041f50212176d7eb5aa
Text-content-sha1: f9754cf2772a05ba9040f246dd63acc6771132e9
Content-length: 571

PROPS-END
import javax.swing.*;

/**
 * Created with IntelliJ IDEA.
 * User: parthmehrotra
 * Date: 6/16/13
 * Time: 3:50 PM
 * To change this template use File | Settings | File Templates.
 */
public class WikiWebLauncher extends JFrame {

    public WikiWebLauncher() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        add(new WikiWebVisualizer());
        setVisible(true);
    }

    public static void main(String[] args) {
        System.out.println("Started");
        new WikiWebLauncher();
    }
}


Node-path: trunk/WikiWeb/src/WikiWebVisualizer.java
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 436
Text-content-md5: f1684885c1618c346c78dd647acc7385
Text-content-sha1: 43f745041df5704947506d2926d1b1770fced0aa
Content-length: 446

PROPS-END
import javax.swing.*;
import java.awt.*;

/**
 * Created with IntelliJ IDEA.
 * User: parthmehrotra
 * Date: 6/16/13
 * Time: 4:21 PM
 * To change this template use File | Settings | File Templates.
 */
public class WikiWebVisualizer extends JPanel {

    public WikiWebVisualizer() {

    }

    @Override
    public void paint(Graphics g) {
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, getWidth(), getHeight());
    }

}


Revision-number: 38
Prop-content-length: 135
Content-length: 135

K 7
svn:log
V 26
Fixed the callback methods
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-16T23:52:30.731117Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 8096
Text-content-md5: baed89fd99c7129600044291e70c64c3
Text-content-sha1: a08c7d9c6051d55a4eb142d710a8091e15478d0e
Content-length: 8096

/**
 * @author Parth Mehrotra
 */

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private long downloadedTextFileSize;
    private File unzippedFile, zippedFile, finalEnglishQueryFile;
    private String[] downloadURLInfo;
    private DownloadUpdater downloadUpdater;
    private double overallStatus;

    public DownloadStatisticProvider() throws Exception {

        downloadURLInfo = getMostRecentName();
//        downloadURLInfo = new String[]{"http://localhost/", "xampp/", "learning/", "pagecounts-20130616-170004.gz"};
        String fileWOExtension = downloadURLInfo[3].replace(".gz", "");
        zippedFile = new File(fileWOExtension + ".gz");
        unzippedFile = new File(fileWOExtension);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());

    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        return s;
    }

    public void attachDownloadUpdater(DownloadUpdater downloadUpdater) {
        this.downloadUpdater = downloadUpdater;
        downloadUpdater.processStarted();
        try {
            prep();
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        downloadUpdater.processFinished();
    }

    public long getSize() {
        return downloadedTextFileSize;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line;
        while ((line = br.readLine()) != null) {

            if (line.contains(wordToCheck) && (line.contains("en "))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line = null;
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    private String[] getMostRecentName() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        return new String[]{root, year, hour, (filePage.get(filePage.size() - 1).split("\"")[1])};
    }

    @Override
    public void prep() throws Exception {
        BufferedReader br;
        URL theFileToBeDownloaded = new URL(downloadURLInfo[0] + downloadURLInfo[1] + downloadURLInfo[2] + downloadURLInfo[3]);
        if (!zippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            long length = Long.parseLong(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            downloadUpdater.downloadStarted();
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                downloadUpdater.setDownloadStatus((double) numWritten / (double) length);
                overallStatus = ((double) numWritten / (double) length);
                downloadUpdater.setOverallStatus(overallStatus * (1d / 3d));
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            downloadUpdater.downloadFinished();
        } else {
            downloadUpdater.downloadUnnessisary();
        }

        downloadUpdater.setOverallStatus(overallStatus);
        if (!unzippedFile.exists()) {

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len;
            byte[] zipBuffer = new byte[1024];

            overallStatus = 0.5;

            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
                downloadUpdater.setUnzipStatus(.50);
                downloadUpdater.setOverallStatus(overallStatus);
            }
            gzipInputStream.close();
            fileOutputStream.close();
        } else {
            downloadUpdater.unzipUnnessisary();
        }

        overallStatus = (2d / 3d);
        downloadUpdater.setOverallStatus(overallStatus);

        LineNumberReader lnr = new LineNumberReader(new FileReader(unzippedFile));
        lnr.skip(Long.MAX_VALUE);
        downloadedTextFileSize = lnr.getLineNumber();

        double rStatus;

        if (!finalEnglishQueryFile.exists()) {
            br = new BufferedReader(new FileReader(unzippedFile));
            FileOutputStream finalEnglishFile = new FileOutputStream("en-"
                    + unzippedFile.toString());
            int j = 0;
            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                String[] data = line.split(" ");
                if (data[0].equals("en")) {
                    line += "\n";
                    finalEnglishFile.write(line.getBytes());
                }
                rStatus = ((double) j++ / (double) downloadedTextFileSize);
                downloadUpdater.setReWriteStatus(rStatus);
                downloadUpdater.setOverallStatus(overallStatus + (rStatus * (1d / 3d)));
            }
            finalEnglishFile.close();
        } else {
            downloadUpdater.reWriteUnnessisary();
        }
        downloadUpdater.setOverallStatus(1d);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
    }
}

Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1512
Text-content-md5: 505e9136cdae4dc794c77ca7356338a2
Text-content-sha1: 81e72cd264edfc3b0541b2bf44ef132cd87dae0c
Content-length: 1512

/**
 * @author Parth Mehrotra
 */

import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;

    public WikiSearch(String pageTitle) throws Exception {
        super(pageTitle);
        relaventLinks = new RelevantLinks(super.getURL());
    }

    public WikiSearch(String pageTitle, WikiFilter filter) throws Exception {
        super(pageTitle);
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL());
    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();
        ArrayList<WikiLink> filteredList = new ArrayList<WikiLink>();

        if (filter.getFilters().size() < 1) {
            return unfilteredList; // TODO Move this up and call the method instead, avoid creating unn objs.
        }

        for (int i = 0; i < unfilteredList.size(); i++) {
            boolean add = true;
            for (int j = 0; j < filter.getFilters().size(); j++) {
                if (unfilteredList.get(i).getTitle().contains(filter.getFilters().get(j))) {
                    add = false;
                }
            }
            if (add)
                filteredList.add(unfilteredList.get(i));
        }

        return filteredList;

    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Revision-number: 39
Prop-content-length: 159
Content-length: 159

K 7
svn:log
V 50
Started graphics work, giving threads some thought
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-17T04:13:09.794891Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 7887
Text-content-md5: af1732e5f3f66f9a885d6b26a2ae954f
Text-content-sha1: cb937fa921245d98a20f90cc007f06e65c9affef
Content-length: 7887

/**
 * @author Parth Mehrotra
 */

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private long downloadedTextFileSize;
    private File unzippedFile, zippedFile, finalEnglishQueryFile;
    private String[] downloadURLInfo;
    private DownloadUpdater downloadUpdater;
    private double overallStatus;

    public DownloadStatisticProvider() throws Exception {

//        downloadURLInfo = getMostRecentName();
        downloadURLInfo = new String[]{"http://localhost/", "xampp/", "learning/", "pagecounts-20130616-170004.gz"};
        String fileWOExtension = downloadURLInfo[3].replace(".gz", "");
        zippedFile = new File(fileWOExtension + ".gz");
        unzippedFile = new File(fileWOExtension);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());

    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        s.replace(" ", "");
        return s;
    }

    public void attachDownloadUpdater(DownloadUpdater downloadUpdater) {
        this.downloadUpdater = downloadUpdater;
        downloadUpdater.processStarted();
        try {
            prep();
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        downloadUpdater.processFinished();
    }

    public long getSize() {
        return downloadedTextFileSize;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        return getPageView(wordToCheck) >= 0;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        wl = wl.replace(" ", "_");
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line;
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    private String[] getMostRecentName() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        return new String[]{root, year, hour, (filePage.get(filePage.size() - 1).split("\"")[1])};
    }

    @Override
    public void prep() throws Exception {
        BufferedReader br;
        URL theFileToBeDownloaded = new URL(downloadURLInfo[0] + downloadURLInfo[1] + downloadURLInfo[2] + downloadURLInfo[3]);
        if (!zippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            long length = Long.parseLong(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            downloadUpdater.downloadStarted();
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                downloadUpdater.setDownloadStatus((double) numWritten / (double) length);
                overallStatus = ((double) numWritten / (double) length);
                downloadUpdater.setOverallStatus(overallStatus * (1d / 3d));
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            downloadUpdater.downloadFinished();
        } else {
            downloadUpdater.downloadUnnessisary();
        }

        downloadUpdater.setOverallStatus(overallStatus);
        if (!unzippedFile.exists()) {

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len;
            byte[] zipBuffer = new byte[1024];

            overallStatus = 0.5;

            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
                downloadUpdater.setUnzipStatus(.50);
                downloadUpdater.setOverallStatus(overallStatus);
            }
            gzipInputStream.close();
            fileOutputStream.close();
        } else {
            downloadUpdater.unzipUnnessisary();
        }

        overallStatus = (2d / 3d);
        downloadUpdater.setOverallStatus(overallStatus);

        LineNumberReader lnr = new LineNumberReader(new FileReader(unzippedFile));
        lnr.skip(Long.MAX_VALUE);
        downloadedTextFileSize = lnr.getLineNumber();

        double rStatus;

        if (!finalEnglishQueryFile.exists()) {
            br = new BufferedReader(new FileReader(unzippedFile));
            FileOutputStream finalEnglishFile = new FileOutputStream("en-"
                    + unzippedFile.toString());
            int j = 0;
            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                String[] data = line.split(" ");
                if (data[0].equals("en")) {
                    line += "\n";
                    finalEnglishFile.write(line.getBytes());
                }
                rStatus = ((double) j++ / (double) downloadedTextFileSize);
                downloadUpdater.setReWriteStatus(rStatus);
                downloadUpdater.setOverallStatus(overallStatus + (rStatus * (1d / 3d)));
            }
            finalEnglishFile.close();
        } else {
            downloadUpdater.reWriteUnnessisary();
        }
        downloadUpdater.setOverallStatus(1d);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
    }
}

Node-path: trunk/WikiWeb/src/DownloadUpdater.java
Node-kind: file
Node-action: change
Text-content-length: 533
Text-content-md5: 460d7d495bf58e1043516cfd6b9a52d7
Text-content-sha1: b463a7b9fb1615b16136719e1788b6a79ee84075
Content-length: 533

public interface DownloadUpdater {
    public void downloadStarted();

    public void setOverallStatus(double status);

    public void setDownloadStatus(double status);

    public void setUnzipStatus(double status);

    public void setReWriteStatus(double status);

    public void downloadFinished();

    public void downloadUnnessisary();

    public void unzipUnnessisary();

    public void reWriteUnnessisary();

    public void processStarted();

    public void processFinished();

    public void downloadRequired();

}


Node-path: trunk/WikiWeb/src/ProgressLine.java
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1010
Text-content-md5: a963f66a7105bfbd527c84b67d991f5c
Text-content-sha1: 4ff370e8210bdd159474e9592ab2a3b3feb04ed0
Content-length: 1020

PROPS-END
import java.awt.*;

/**
 * Created with IntelliJ IDEA.
 * User: parthmehrotra
 * Date: 6/16/13
 * Time: 10:15 PM
 * To change this template use File | Settings | File Templates.
 */
public class ProgressLine {

    private double status;
    private Color color;
    private int x, y, w;

    public ProgressLine(Color color) {
        this.color = color;
    }

    public ProgressLine(Color color, int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.color = color;
    }

    public void setDim(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }

    public void paint(Graphics g) {
        Color before = g.getColor();
        g.setColor(color);

        g.drawRect(x, y, w, 5);
        g.fillRect(x+2, y+2, (int) (status * w) - 4, 1);

        g.setColor(before);
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public double getStatus(double status) {
        return status;
    }
}


Node-path: trunk/WikiWeb/src/RelevantLinks.java
Node-kind: file
Node-action: change
Text-content-length: 2553
Text-content-md5: 2cb2b36512df88337f70ad8eca977d81
Text-content-sha1: d536caec9a337f82e8673ff978a49cb59ffda23b
Content-length: 2553

/**
 * @author Parth Mehrotra
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

public class RelevantLinks {

    private ArrayList<WikiLink> relaventLinks;

    public RelevantLinks(URL url, DownloadStatisticProvider dsp) throws Exception {

        try {
            URLConnection con = url.openConnection();
            BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String now;
            ArrayList<String> lines = new ArrayList<String>();

            ArrayList<String> a = null;
            while ((now = allHtml.readLine()) != null) {
                a = getLinks(now);

                if (a != null)
                    for (int i = 0; i < a.size(); i++) {
                        lines.add(a.get(i));
                    }
            }
            relaventLinks = getWikipediaLinks(lines);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String[] getTitleAndLink(String line) {
        String[] ar = line.split("\"");
        if (ar.length <= 2) {
            return null;
        }
        return new String[]{ar[2], ar[0]};
    }

    private static ArrayList<String> getLinks(String str) {
        if (!str.contains(WikiLink.STRING_SPLITTER))
            return null;

        ArrayList<String> s = new ArrayList<String>();
        String[] ar = str.split(WikiLink.STRING_SPLITTER);
        for (int i = 1; i < ar.length; i++) {
            s.add(ar[i]);
        }
        return s;
    }

    private ArrayList<WikiLink> getWikipediaLinks(ArrayList<String> lines) throws Exception {
        ArrayList<WikiLink> wl = new ArrayList<WikiLink>();

        for (int i = 0; i < lines.size(); i++) {
            String[] titleLink = getTitleAndLink(lines.get(i));
            if (titleLink != null) {
                try {
                    URL url = new URL(WikiLink.URL_HEAD + titleLink[1]);
                    WikiLink wikiLink = new WikiLink(titleLink[0], url);
                    wl.add(wikiLink);
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

            }
        }
        return wl;
    }

    public ArrayList<WikiLink> getWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/Tester_DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 2350
Text-content-md5: dc486047b214f436a180fbca00cbaefb
Text-content-sha1: 17e9953c57d4bbd92fec66eff364c4378adff264
Content-length: 2350

/**
 * @author Parth Mehrotra
 */

import java.util.Scanner;

public class Tester_DownloadStatisticProvider implements DownloadUpdater {
    DownloadStatisticProvider dsp;
    public Tester_DownloadStatisticProvider() throws Exception {
        dsp= new DownloadStatisticProvider();
        dsp.attachDownloadUpdater(this);
    }

    public static void main(String[] args) throws Exception {
        new Tester_DownloadStatisticProvider();
    }

    @Override
    public void downloadStarted() {
        System.out.println("Download Has Begun...");
    }

    @Override
    public void setOverallStatus(double status) {
        System.out.println("Overall Status: " + (status * 100) + "%");
    }

    @Override
    public void setDownloadStatus(double status) {
        System.out.println("Download Status: " + (status * 100) + "%");
    }

    @Override
    public void setUnzipStatus(double status) {
        System.out.println("Unzip Status: " + (status * 100) + "%");
    }


    @Override
    public void setReWriteStatus(double status) {
        System.out.println("Rewrite Status: " + (status * 100) + "%");
    }

    @Override
    public void downloadFinished() {
        System.out.println("Download Finished");
    }

    @Override
    public void downloadUnnessisary() {
        System.out.println("Down Unn");
    }

    @Override
    public void unzipUnnessisary() {
        System.out.println("zip unn");
    }

    @Override
    public void reWriteUnnessisary() {
        System.out.println("zip unn");
    }

    @Override
    public void processStarted() {
        System.out.println("Process Started");
    }

    @Override
    public void processFinished() {
        System.out.println("Process Finished");
        Scanner sc = new Scanner(System.in);
        for (String in = sc.nextLine(); !in.equalsIgnoreCase("exit"); in=sc.nextLine()) {
            try {
                System.out.println(dsp.getPageView(in));
            } catch (Exception e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }
        }
    }

    @Override
    public void downloadRequired() {
        //To change body of implemented methods use File | Settings | File Templates.
    }
}


Node-path: trunk/WikiWeb/src/Tester_WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 4810
Text-content-md5: 5739599ae25e1518f4506954c6642d95
Text-content-sha1: aa2ea7c4af2647264974bef03726406270c9f02a
Content-length: 4810

/**
 * @author Parth Mehrotra
 */

import java.util.ArrayList;
import java.util.Scanner;

public class Tester_WikiSearch {

    public static void main(String args[]) throws Exception {
        final DownloadStatisticProvider dsp = new DownloadStatisticProvider();
        dsp.attachDownloadUpdater(new DownloadUpdater() {
            @Override
            public void downloadStarted() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void setOverallStatus(double status) {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void setDownloadStatus(double status) {
                System.out.println(status);
            }

            @Override
            public void setUnzipStatus(double status) {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void setReWriteStatus(double status) {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void downloadFinished() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void downloadUnnessisary() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void unzipUnnessisary() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void reWriteUnnessisary() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void processStarted() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void processFinished() {
                System.out.println("Ready");
                WikiFilter f = new WikiFilter(addFilters());
                Scanner sc = new Scanner(System.in);
                for (String input = sc.nextLine(); !input.equalsIgnoreCase("exit"); input = sc.nextLine()) {
                    WikiSearch wikiSearch = null;
                    try {
                        wikiSearch = new WikiSearch(input, f, dsp);
                    } catch (Exception e) {
                        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                    }
                    try {
                        for (int i = 0; i < wikiSearch.getFilteredWikipediaLinks().size(); i++) {
//                        System.out.println("\t" + wikiSearch.getFilteredWikipediaLinks().get(i));
                        }
                    } catch (Exception e) {
                    }
                }
            }

            @Override
            public void downloadRequired() {
                //To change body of implemented methods use File | Settings | File Templates.
            }
        });

    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString.add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        filterString.add("Talk:");
        filterString.add("Wikipedia:");
        filterString.add("internal:");
        return filterString;
    }
}


Node-path: trunk/WikiWeb/src/WikiLink.java
Node-kind: file
Node-action: change
Text-content-length: 1237
Text-content-md5: 29f9d87c8c10828825ce27e3cf269601
Text-content-sha1: 8e65c635ba3cb0a76f8bc905ed845c843cc82377
Content-length: 1237

/**
 * @author Parth Mehrotra
 */

import java.net.MalformedURLException;
import java.net.URL;

public class WikiLink {

    public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
    public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
    private String pageTitle;
    private URL url;
    private long pageVC = 0;

    public WikiLink(String pageTitle) {
        this.pageTitle = pageTitle;
        pageTitle = pageTitle.replace(" ", "_");//XXX should this be switched?
        try {
            url = new URL(URL_HEAD + pageTitle);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        pageVC = -1;
    }

    public WikiLink(String pageTitle, URL url) {
        this.pageTitle = pageTitle;
        this.url = url;
        pageVC = -1;
    }

    public String getTitle() {
        return pageTitle;
    }

    public URL getURL() {
        return url;
    }

    @Override
    public String toString() {
        return pageTitle + ": " + pageVC + "\t" + " \t@\t " + url.toString();
    }

    public long getPageVC() {
        return pageVC;
    }

    public void setPageVC(long l) {
        pageVC = l;
    }

}


Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 1873
Text-content-md5: ec7fabfa87136627d2d2adb96fc8d7de
Text-content-sha1: f2c5854bdc7a1e61c7dd617445b565af29839994
Content-length: 1873

/**
 * @author Parth Mehrotra
 */

import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;
    DownloadStatisticProvider dsp;

    public WikiSearch(String pageTitle, DownloadStatisticProvider dsp) throws Exception {
        super(pageTitle);
        this.dsp = dsp;
        relaventLinks = new RelevantLinks(super.getURL(), dsp);
    }

    public WikiSearch(String pageTitle, WikiFilter filter, DownloadStatisticProvider dsp) throws Exception {
        super(pageTitle);
        this.dsp = dsp;
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL(), dsp);
    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() throws Exception {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();
        ArrayList<WikiLink> filteredList = new ArrayList<WikiLink>();

        if (filter.getFilters().size() < 1) {
            return unfilteredList; // TODO Move this up and call the method instead, avoid creating unn objs.
        }

        for (int i = 0; i < unfilteredList.size(); i++) {
            boolean add = true;
            for (int j = 0; j < filter.getFilters().size(); j++) {
                if (unfilteredList.get(i).getTitle().contains(filter.getFilters().get(j))) {
                    add = false;
                }
            }
            if (add) {
                WikiLink wikiLink = unfilteredList.get(i);
                wikiLink.setPageVC(dsp.getPageView(wikiLink.getTitle()));
                filteredList.add(wikiLink);
                System.out.println(wikiLink);
            }
        }

        return filteredList;

    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/WikiWebLauncher.java
Node-kind: file
Node-action: change
Text-content-length: 556
Text-content-md5: 05fb377bb318e196b52b90f3fe4bcfa3
Text-content-sha1: 4be5445b88d0d67834098a8a7736d38aeeb752f5
Content-length: 556

import javax.swing.*;

/**
 * Created with IntelliJ IDEA.
 * User: parthmehrotra
 * Date: 6/16/13
 * Time: 3:50 PM
 * To change this template use File | Settings | File Templates.
 */
public class WikiWebLauncher extends JFrame {

    public WikiWebLauncher() throws Exception {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        add(new WikiWebVisualizer());
        setVisible(true);
    }

    public static void main(String[] args) throws Exception {
        new WikiWebLauncher();
    }
}


Node-path: trunk/WikiWeb/src/WikiWebVisualizer.java
Node-kind: file
Node-action: change
Text-content-length: 2706
Text-content-md5: ac26b1c8fc9c8b1b0530930df3b1c63c
Text-content-sha1: c38ab459f476915f7e1c5991130842928f73bf7f
Content-length: 2706

import javax.swing.*;
import java.awt.*;

public class WikiWebVisualizer extends JPanel implements DownloadUpdater, Runnable {

    private static final int download = 0;
    private static final int query = 1;
    Thread graphics;
    private ProgressLine overall, task;
    private DownloadStatisticProvider dsp;
    private int mode;

    public WikiWebVisualizer() throws Exception {
//        dsp = new DownloadStatisticProvider();
        int w = 200;
        int x = getWidth() - w / 2;
        int y1 = getHeight() - 50;
        int y2 = getHeight() + 50;

        overall = new ProgressLine(Color.RED);
        graphics = new Thread(this);
//        dsp.attachDownloadUpdater(this);
    }

    @Override
    public void paint(Graphics g) {
        if (mode == download) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());

            int w = 500;
            int x = (getWidth() / 2) - (w / 2);
            int y1 = getHeight() / 2 - 50;
            int y2 = getHeight() / 2 + 50;
            overall.setDim(x, y1, w);

            overall.paint(g);
        }
    }

    @Override
    public void downloadStarted() {
        repaint();
    }

    @Override
    public void setOverallStatus(double status) {
        repaint();
    }

    @Override
    public void setDownloadStatus(double status) {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void setUnzipStatus(double status) {
        repaint();
    }

    @Override
    public void setReWriteStatus(double status) {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void downloadFinished() {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void downloadUnnessisary() {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void unzipUnnessisary() {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void reWriteUnnessisary() {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void processStarted() {
        mode = download;

        repaint();
    }

    @Override
    public void processFinished() {
        mode = query;
        repaint();
    }

    @Override
    public void downloadRequired() {
        repaint();
    }

    @Override
    public void run() {

    }
}


Revision-number: 40
Prop-content-length: 124
Content-length: 124

K 7
svn:log
V 15
Result Callback
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-17T12:08:52.372374Z
PROPS-END

Node-path: trunk/WikiWeb/src/ResultFound.java
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 79
Text-content-md5: 97565d62beb8f40b475846e4a2dc3318
Text-content-sha1: a08ef34acf059a71c2ed78e50382e1557a8fa9ef
Content-length: 89

PROPS-END
public interface ResultFound {
    public void resultFound(WikiLink result);
}


Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 2108
Text-content-md5: 64c8da4f824cb27470b165e6228a9c98
Text-content-sha1: 8011e702a827b158fa8c495fc4cee229f000c48a
Content-length: 2108

/**
 * @author Parth Mehrotra
 */

import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;
    private DownloadStatisticProvider dsp;
    private ResultFound resultFound;

    public WikiSearch(String pageTitle, DownloadStatisticProvider dsp) throws Exception {
        super(pageTitle);
        this.dsp = dsp;
        relaventLinks = new RelevantLinks(super.getURL(), dsp);
    }


    public WikiSearch(String pageTitle, WikiFilter filter, DownloadStatisticProvider dsp) throws Exception {
        super(pageTitle);
        this.dsp = dsp;
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL(), dsp);
    }

    public void attachResultsFound(ResultFound resultFound) {
        this.resultFound = resultFound;
    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() throws Exception {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();
        ArrayList<WikiLink> filteredList = new ArrayList<WikiLink>();

        if (filter.getFilters().size() < 1) {
            return unfilteredList; // TODO Move this up and call the method instead, avoid creating unn objs.
        }

        for (int i = 0; i < unfilteredList.size(); i++) {
            boolean add = true;
            for (int j = 0; j < filter.getFilters().size(); j++) {
                if (unfilteredList.get(i).getTitle().contains(filter.getFilters().get(j))) {
                    add = false;
                }
            }
            if (add) {
                WikiLink wikiLink = unfilteredList.get(i);
                wikiLink.setPageVC(dsp.getPageView(wikiLink.getTitle()));
                filteredList.add(wikiLink);
                if (resultFound != null) {
                    resultFound.resultFound(wikiLink);
                }

            }
        }

        return filteredList;

    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/WikiWebVisualizer.java
Node-kind: file
Node-action: change
Text-content-length: 4596
Text-content-md5: 43113806091ce3ee672a48dcf42b817f
Text-content-sha1: 137fb96a15639c4f227ed74fb38d6b65d993df2b
Content-length: 4596

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class WikiWebVisualizer extends JPanel implements DownloadUpdater, Runnable, ResultFound {

    private static final int download = 0;
    private static final int query = 1;
    Thread graphics;
    private ProgressLine overall, task;
    private DownloadStatisticProvider dsp;
    private int mode;
    private String taskString;
    private String overallString;
    private WikiSearch wikiSearch;

    public WikiWebVisualizer() throws Exception {
        dsp = new DownloadStatisticProvider();


    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString.add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        filterString.add("Talk:");
        filterString.add("Wikipedia:");
        filterString.add("internal:");
        return filterString;
    }

    public void setText(String overallString, String taskString) {
        this.overallString = overallString;
        this.taskString = taskString;
    }

    @Override
    public void paint(Graphics g) {
        if (mode == download) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());

            int w = 500;
            int x = (getWidth() / 2) - (w / 2);
            int y1 = getHeight() / 2 - 50;
            int y2 = getHeight() / 2 + 50;

            overall.setDim(x, y1, w);
            task.setDim(x, y2, w);

            overall.paint(g);
            task.paint(g);
        }
    }

    @Override
    public void downloadStarted() {
        repaint();
    }

    @Override
    public void setOverallStatus(double status) {
        repaint();
    }

    @Override
    public void setDownloadStatus(double status) {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void setUnzipStatus(double status) {
        repaint();
    }

    @Override
    public void setReWriteStatus(double status) {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void downloadFinished() {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void downloadUnnessisary() {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void unzipUnnessisary() {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void reWriteUnnessisary() {
        //To change body of implemented methods use File | Settings | File Templates.
        repaint();
    }

    @Override
    public void processStarted() {
        mode = download;

        repaint();
    }

    @Override
    public void processFinished() {
        overall = new ProgressLine(Color.RED);
        task = new ProgressLine(Color.RED);
        graphics = new Thread(this);
        dsp.attachDownloadUpdater(this);
        try {
            wikiSearch = new WikiSearch("Computer Science", new WikiFilter(addFilters()), dsp);
        } catch (Exception e) {
        }
        mode = query;
        repaint();
    }

    @Override
    public void downloadRequired() {
        repaint();
    }

    @Override
    public void run() {

    }

    @Override
    public void resultFound(WikiLink result) {

    }
}


Revision-number: 41
Prop-content-length: 141
Content-length: 141

K 7
svn:log
V 32
Multithreading will be nessisary
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-17T12:50:38.430431Z
PROPS-END

Node-path: trunk/WikiWeb/src/ProgressLine.java
Node-kind: file
Node-action: change
Text-content-length: 1013
Text-content-md5: da3936af8dfd1b88519df1dcd431286d
Text-content-sha1: 3f94d61094d22279749603e0a4dd559af9dbd0a4
Content-length: 1013

import java.awt.*;

/**
 * Created with IntelliJ IDEA.
 * User: parthmehrotra
 * Date: 6/16/13
 * Time: 10:15 PM
 * To change this template use File | Settings | File Templates.
 */
public class ProgressLine {

    private double status;
    private Color color;
    private int x, y, w;

    public ProgressLine(Color color) {
        this.color = color;
    }

    public ProgressLine(Color color, int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.color = color;
    }

    public void setDim(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }

    public void paint(Graphics g) {
        Color before = g.getColor();
        g.setColor(color);

        g.drawRect(x, y, w, 5);
        g.fillRect(x+2, y+2, (int) (status * w) - 4, 1);

        g.setColor(before);
    }

    public void setStatus(double status) {
        this.status = status;
    }

    public double getStatus(double status) {
        return status;
    }
}


Node-path: trunk/WikiWeb/src/WikiWebVisualizer.java
Node-kind: file
Node-action: change
Text-content-length: 5606
Text-content-md5: 9e40f9e1ae433fff06fd0c6f90b48773
Text-content-sha1: 571235e84eefc2e36e8bfff4265c74de79d67e8e
Content-length: 5606

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class WikiWebVisualizer extends JPanel implements Runnable {

    private static final int download = 0;
    private static final int query = 1;
    private Thread graphics;
    private ProgressLine overall, task;
    private int mode;
    private String taskString;
    private String overallString;
    private WikiSearch wikiSearch;

    private DownloadStatisticProvider dsp;

    public WikiWebVisualizer() throws Exception {
        int w = 200;
        int x = getWidth() - w / 2;
        int y1 = getHeight() - 50;
        int y2 = getHeight() + 50;

        overall = new ProgressLine(Color.RED);
        task = new ProgressLine(Color.RED);

        graphics = new Thread(this);
    }

    public void setText(String overallString, String taskString) {
        this.overallString = overallString;
        this.taskString = taskString;
    }

    @Override
    public void paint(Graphics g) {
        if (mode == download) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());

            int w = 500;
            int x = (getWidth() / 2) - (w / 2);
            int y1 = getHeight() / 2 - 50;
            int y2 = getHeight() / 2 + 50;

            overall.setDim(x, y1, w);
            task.setDim(x, y2, w);

            overall.paint(g);
            task.paint(g);
        }
    }

    @Override
    public void run() {
        try {
            dsp = new DownloadStatisticProvider();
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        WikiFilter filter = new WikiFilter(addFilters());
        try {
            WikiSearch search = new WikiSearch("Computer Science", filter, dsp);
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }

        dsp.attachDownloadUpdater(new DownloadUpdater() {
            @Override
            public void downloadStarted() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void setOverallStatus(double status) {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void setDownloadStatus(double status) {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void setUnzipStatus(double status) {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void setReWriteStatus(double status) {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void downloadFinished() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void downloadUnnessisary() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void unzipUnnessisary() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void reWriteUnnessisary() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void processStarted() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void processFinished() {
                //To change body of implemented methods use File | Settings | File Templates.
            }

            @Override
            public void downloadRequired() {
                //To change body of implemented methods use File | Settings | File Templates.
            }
        });


    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString.add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        filterString.add("Talk:");
        filterString.add("Wikipedia:");
        filterString.add("internal:");
        return filterString;
    }
}


Revision-number: 42
Prop-content-length: 141
Content-length: 141

K 7
svn:log
V 32
Multithreading will be nessisary
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-17T15:10:40.996547Z
PROPS-END

Node-path: trunk/WikiWeb/src/WikiWebVisualizer.java
Node-kind: file
Node-action: change
Text-content-length: 6309
Text-content-md5: e97bac6f4438bfca61bfe1c2ca51d237
Text-content-sha1: 030a930b61903f69f385a7bdd16ed3b5684438f6
Content-length: 6309

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class WikiWebVisualizer extends JPanel {

    private static final int download = 0;
    private static final int query = 1;
    private Thread dataRetrievalThread;
    private Thread graphicsThread;
    private ProgressLine overall, task;
    private int mode;
    private String taskString;
    private String overallString;
    private WikiSearch wikiSearch;

    private DownloadStatisticProvider dsp;

    public WikiWebVisualizer() throws Exception {
        int w = 200;
        int x = getWidth() - w / 2;
        int y1 = getHeight() - 50;
        int y2 = getHeight() + 50;

        overall = new ProgressLine(Color.RED);
        task = new ProgressLine(Color.RED);

        graphicsThread = new Thread(new Runnable() {
            @Override
            public void run() {

            }
        });

        dataRetrievalThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    dsp = new DownloadStatisticProvider();
                } catch (Exception e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
                WikiFilter filter = new WikiFilter(addFilters());
                try {
                    WikiSearch search = new WikiSearch("Computer Science", filter, dsp);
                } catch (Exception e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }

                dsp.attachDownloadUpdater(new DownloadUpdater() {
                    @Override
                    public void downloadStarted() {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void setOverallStatus(double status) {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void setDownloadStatus(double status) {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void setUnzipStatus(double status) {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void setReWriteStatus(double status) {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void downloadFinished() {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void downloadUnnessisary() {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void unzipUnnessisary() {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void reWriteUnnessisary() {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void processStarted() {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void processFinished() {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }

                    @Override
                    public void downloadRequired() {
                        //To change body of implemented methods use File | Settings | File Templates.
                    }
                });
            }
        });
    }

    public void setText(String overallString, String taskString) {
        this.overallString = overallString;
        this.taskString = taskString;
    }

    @Override
    public void paint(Graphics g) {
        if (mode == download) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());

            int w = 500;
            int x = (getWidth() / 2) - (w / 2);
            int y1 = getHeight() / 2 - 50;
            int y2 = getHeight() / 2 + 50;

            overall.setDim(x, y1, w);
            task.setDim(x, y2, w);

            overall.paint(g);
            task.paint(g);
        }
    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString.add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        filterString.add("Talk:");
        filterString.add("Wikipedia:");
        filterString.add("internal:");
        return filterString;
    }
}


Revision-number: 43
Prop-content-length: 128
Content-length: 128

K 7
svn:log
V 19
Progress is working
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-17T17:30:50.677557Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 7855
Text-content-md5: b71d191c68f8bd960a5e6d109bfa84f3
Text-content-sha1: 1876473844391a185806381ccb99ec91d5aabc16
Content-length: 7855

/**
 * @author Parth Mehrotra
 */

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private long downloadedTextFileSize;
    private File unzippedFile, zippedFile, finalEnglishQueryFile;
    private String[] downloadURLInfo;
    private DownloadUpdater downloadUpdater;
    private double overallStatus;

    public DownloadStatisticProvider() throws Exception {

        downloadURLInfo = getMostRecentName();
        String fileWOExtension = downloadURLInfo[3].replace(".gz", "");
        zippedFile = new File(fileWOExtension + ".gz");
        unzippedFile = new File(fileWOExtension);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
        System.out.println("Created");
        
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        s.replace(" ", "");
        return s;
    }

    public void attachDownloadUpdater(DownloadUpdater downloadUpdater) {
        this.downloadUpdater = downloadUpdater;
        downloadUpdater.processStarted();
        System.out.println("Started");
        try {
            prep();
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        downloadUpdater.processFinished();
    }

    public long getSize() {
        return downloadedTextFileSize;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        return getPageView(wordToCheck) >= 0;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        wl = wl.replace(" ", "_");
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line;
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    private String[] getMostRecentName() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        return new String[]{root, year, hour, (filePage.get(filePage.size() - 1).split("\"")[1])};
    }

    @Override
    public void prep() throws Exception {
        BufferedReader br;
        URL theFileToBeDownloaded = new URL(downloadURLInfo[0] + downloadURLInfo[1] + downloadURLInfo[2] + downloadURLInfo[3]);
        if (!zippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            long length = Long.parseLong(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            downloadUpdater.downloadStarted();
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                downloadUpdater.setDownloadStatus((double) numWritten / (double) length);
                overallStatus = ((double) numWritten / (double) length);
                downloadUpdater.setOverallStatus(overallStatus * (1d / 3d));
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            downloadUpdater.downloadFinished();
        } else {
            downloadUpdater.downloadUnnessisary();
        }

        downloadUpdater.setOverallStatus(overallStatus);
        if (!unzippedFile.exists()) {

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len;
            byte[] zipBuffer = new byte[1024];

            overallStatus = 0.5;

            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
                downloadUpdater.setUnzipStatus(.50);
                downloadUpdater.setOverallStatus(overallStatus);
            }
            gzipInputStream.close();
            fileOutputStream.close();
        } else {
            downloadUpdater.unzipUnnessisary();
        }

        overallStatus = (2d / 3d);
        downloadUpdater.setOverallStatus(overallStatus);

        LineNumberReader lnr = new LineNumberReader(new FileReader(unzippedFile));
        lnr.skip(Long.MAX_VALUE);
        downloadedTextFileSize = lnr.getLineNumber();

        double rStatus;

        if (!finalEnglishQueryFile.exists()) {
            br = new BufferedReader(new FileReader(unzippedFile));
            FileOutputStream finalEnglishFile = new FileOutputStream("en-"
                    + unzippedFile.toString());
            int j = 0;
            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                String[] data = line.split(" ");
                if (data[0].equals("en")) {
                    line += "\n";
                    finalEnglishFile.write(line.getBytes());
                }
                rStatus = ((double) j++ / (double) downloadedTextFileSize);
                downloadUpdater.setReWriteStatus(rStatus);
                downloadUpdater.setOverallStatus(overallStatus + (rStatus * (1d / 3d)));
            }
            finalEnglishFile.close();
        } else {
            downloadUpdater.reWriteUnnessisary();
        }
        downloadUpdater.setOverallStatus(1d);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
    }
}

Node-path: trunk/WikiWeb/src/ProgressLine.java
Node-kind: file
Node-action: change
Text-content-length: 851
Text-content-md5: 57e369dcee01cb39dd679e59854705dc
Text-content-sha1: 0ab64bec7ea53f0a0885f8ac8010d3da8774a2b8
Content-length: 851

import java.awt.*;

public class ProgressLine {

    private double status;
    private Color color;
    private int x, y, w;

    public ProgressLine(Color color) {
        this.color = color;
    }

    public ProgressLine(Color color, int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.color = color;
    }

    public void setDim(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }

    public void paint(Graphics g) {
        Color before = g.getColor();
        g.setColor(color);

        g.drawRect(x, y, w, 5);
        g.fillRect(x+2, y+2, (int) (status * w) - 4, 1);

        g.setColor(before);
    }

    public void setStatus(double status) {
        this.status = status;
    }

    public double getStatus(double status) {
        return status;
    }
}


Node-path: trunk/WikiWeb/src/WikiWebLauncher.java
Node-kind: file
Node-action: change
Text-content-length: 395
Text-content-md5: 8f349d77f6d6a965aa7d9459446f6f52
Text-content-sha1: 4482a6f22f3ee15ddced3d00b1021b261cc4aaee
Content-length: 395

import javax.swing.*;

public class WikiWebLauncher extends JFrame {

    public WikiWebLauncher() throws Exception {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        add(new WikiWebVisualizer());
        setVisible(true);
    }

    public static void main(String[] args) throws Exception {
        new WikiWebLauncher();
    }
}


Node-path: trunk/WikiWeb/src/WikiWebVisualizer.java
Node-kind: file
Node-action: change
Text-content-length: 3847
Text-content-md5: b6e12e0db41345064a9de19bb4c9e280
Text-content-sha1: b33112a7a26c47f8b85afcc0717ada8d9513d495
Content-length: 3847

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class WikiWebVisualizer extends JPanel {

	private static final int download = 0;
	private static final int query = 1;
	private Thread dataRetrievalThread;
	private ProgressLine overall, task;
	private int mode;
	private String taskString;
	private String overallString;
	private WikiSearch wikiSearch;

	public WikiWebVisualizer() throws Exception {
		int w = 200;
		int x = getWidth() - w / 2;
		int y1 = getHeight() - 50;
		int y2 = getHeight() + 50;

		overall = new ProgressLine(Color.RED);
		task = new ProgressLine(Color.RED);

		dataRetrievalThread = new Thread(new Runnable() {
			@Override
			public void run() {
				System.out.println("Rund");
				DownloadStatisticProvider dsp = null;
				try {
					dsp = new DownloadStatisticProvider();
				} catch (Exception e) {
				}
				WikiFilter filter = new WikiFilter(addFilters());
				try {
					WikiSearch search = new WikiSearch("Computer Science",
							filter, dsp);
				} catch (Exception e) {
				}

				dsp.attachDownloadUpdater(new DownloadUpdater() {
					@Override
					public void downloadStarted() {
					}

					@Override
					public void setOverallStatus(double status) {
						System.out.println("Overall: " + status);
						overall.setStatus(status);
						repaint();
					}

					@Override
					public void setDownloadStatus(double status) {
					}

					@Override
					public void setUnzipStatus(double status) {
					}

					@Override
					public void setReWriteStatus(double status) {
					}

					@Override
					public void downloadFinished() {
					}

					@Override
					public void downloadUnnessisary() {
					}

					@Override
					public void unzipUnnessisary() {
					}

					@Override
					public void reWriteUnnessisary() {
					}

					@Override
					public void processStarted() {
						mode = download;
						System.out.println("downlaod start");
					}

					@Override
					public void processFinished() {
					}

					@Override
					public void downloadRequired() {
					}
				});
			}
		});
		dataRetrievalThread.start();
	}

	public void setText(String overallString, String taskString) {
		this.overallString = overallString;
		this.taskString = taskString;
	}

	@Override
	public void paint(Graphics g) {
		if (mode == download) {
			g.setColor(Color.BLACK);
			g.fillRect(0, 0, getWidth(), getHeight());

			int w = 500;
			int x = (getWidth() / 2) - (w / 2);
			int y1 = getHeight() / 2 - 50;
			int y2 = getHeight() / 2 + 50;

			overall.setDim(x, y1, w);
			task.setDim(x, y2, w);

			overall.paint(g);
			task.paint(g);
		}
	}

	public static ArrayList<String> addFilters() {
		ArrayList<String> filterString = new ArrayList<String>();
		filterString.add("File:");
		filterString.add("image");
		filterString.add("Book:");
		filterString.add("Category:");
		filterString.add("Portal:");
		filterString.add("Help:");
		filterString.add("Discussion about the content page");
		filterString.add("Visit the main page");
		filterString.add("Guides to browsing Wikipedia");
		filterString.add("Featured content – the best of Wikipedia");
		filterString.add("Find background information on current events");
		filterString.add("Load a random article");
		filterString.add("Guidance on how to use and edit Wikipedia");
		filterString.add("Find out about Wikipedia");
		filterString.add("About the project");
		filterString
				.add("List of all English Wikipedia pages containing links to this page");
		filterString.add("Recent changes in pages linked from this page");
		filterString.add("Upload files");
		filterString.add("A list of all special pages");
		filterString.add("Wikipedia:About");
		filterString.add("Wikipedia:General disclaimer");
		filterString.add("Talk:");
		filterString.add("Wikipedia:");
		filterString.add("internal:");
		return filterString;
	}
}


Revision-number: 44
Prop-content-length: 150
Content-length: 150

K 7
svn:log
V 41
Project in a working state v 0.000001 lol
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-18T03:46:12.678874Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 7975
Text-content-md5: 0a9fb876cebfe952caa38e1120c15d56
Text-content-sha1: cb1ad1f24a2a5d2c3b6552944b98cdd71a981370
Content-length: 7975

/**
 * @author Parth Mehrotra
 */

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

public class DownloadStatisticProvider implements Statistic {

    private long downloadedTextFileSize;
    private File unzippedFile, zippedFile, finalEnglishQueryFile;
    private String[] downloadURLInfo;
    private DownloadUpdater downloadUpdater;
    private double overallStatus;

    public DownloadStatisticProvider() throws Exception {

//        downloadURLInfo = getMostRecentName();
        downloadURLInfo = new String[]{"http://localhost/", "xampp/", "learning/", "pagecounts-20130616-170004.gz"};
        String fileWOExtension = downloadURLInfo[3].replace(".gz", "");
        zippedFile = new File(fileWOExtension + ".gz");
        unzippedFile = new File(fileWOExtension);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
        System.out.println("Created");
        
    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        s.replace(" ", "");
        return s;
    }

    public void attachDownloadUpdater(DownloadUpdater downloadUpdater) {
        this.downloadUpdater = downloadUpdater;
        downloadUpdater.processStarted();
        System.out.println("Started");
        try {
            prep();
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        downloadUpdater.processFinished();
    }

    public long getSize() {
        return downloadedTextFileSize;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        return getPageView(wordToCheck) >= 0;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        wl = wl.replace(" ", "_");
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line;
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    private String[] getMostRecentName() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        return new String[]{root, year, hour, (filePage.get(filePage.size() - 1).split("\"")[1])};
    }

    @Override
    public void prep() throws Exception {
        BufferedReader br;
        URL theFileToBeDownloaded = new URL(downloadURLInfo[0] + downloadURLInfo[1] + downloadURLInfo[2] + downloadURLInfo[3]);
        if (!zippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            long length = Long.parseLong(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            downloadUpdater.downloadStarted();
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                downloadUpdater.setDownloadStatus((double) numWritten / (double) length);
                overallStatus = ((double) numWritten / (double) length);
                downloadUpdater.setOverallStatus(overallStatus * (1d / 3d));
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            downloadUpdater.downloadFinished();
        } else {
            downloadUpdater.downloadUnnessisary();
        }

        downloadUpdater.setOverallStatus(overallStatus);
        if (!unzippedFile.exists()) {

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len;
            byte[] zipBuffer = new byte[1024];

            overallStatus = 0.5;

            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
                downloadUpdater.setUnzipStatus(.50);
                downloadUpdater.setOverallStatus(overallStatus);
            }
            gzipInputStream.close();
            fileOutputStream.close();
        } else {
            downloadUpdater.unzipUnnessisary();
        }

        overallStatus = (2d / 3d);
        downloadUpdater.setOverallStatus(overallStatus);

        LineNumberReader lnr = new LineNumberReader(new FileReader(unzippedFile));
        lnr.skip(Long.MAX_VALUE);
        downloadedTextFileSize = lnr.getLineNumber();

        double rStatus;

        if (!finalEnglishQueryFile.exists()) {
            br = new BufferedReader(new FileReader(unzippedFile));
            FileOutputStream finalEnglishFile = new FileOutputStream("en-"
                    + unzippedFile.toString());
            int j = 0;
            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                String[] data = line.split(" ");
                if (data[0].equals("en")) {
                    line += "\n";
                    finalEnglishFile.write(line.getBytes());
                }
                rStatus = ((double) j++ / (double) downloadedTextFileSize);
                downloadUpdater.setReWriteStatus(rStatus);
                downloadUpdater.setOverallStatus(overallStatus + (rStatus * (1d / 3d)));
            }
            finalEnglishFile.close();
        } else {
            downloadUpdater.reWriteUnnessisary();
        }
        downloadUpdater.setOverallStatus(1d);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
    }
}

Node-path: trunk/WikiWeb/src/ProgressLine.java
Node-kind: file
Node-action: change
Text-content-length: 1064
Text-content-md5: 36f0b7fb3f7095b0b8514e99e61f0c4f
Text-content-sha1: ed32e6165e15287f5f9f526d42e262eac1ba63f5
Content-length: 1064

import java.awt.*;

public class ProgressLine {

    private double status;
    private Color innerColor;
    private Color frameColor;
    private int x, y, w;

    public ProgressLine(Color innerColor, Color frameColor) {
        this.innerColor = innerColor;
        this.frameColor = frameColor;
    }

    public ProgressLine(Color innerColor, Color frameColor, int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.innerColor = innerColor;
        this.frameColor = frameColor;
    }

    public void setDim(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }

    public void paint(Graphics g) {
        Color before = g.getColor();
        g.setColor(frameColor);
        g.drawRect(x, y, w, 5);
        g.setColor(innerColor);
        g.fillRect(x+2, y+2, (int) (status * w) - 4, 2);

        g.setColor(before);
    }

    public void setStatus(double status) {
        this.status = status;
    }

    public double getStatus(double status) {
        return status;
    }
}


Node-path: trunk/WikiWeb/src/WikiLink.java
Node-kind: file
Node-action: change
Text-content-length: 1613
Text-content-md5: 38b8b58622f15a8e31e9adcca7ad2c62
Text-content-sha1: 5c3129a0303f69cfdf9d4dd7f933b214b20ba3a5
Content-length: 1613

/**
 * @author Parth Mehrotra
 */

import java.net.MalformedURLException;
import java.net.URL;

public class WikiLink implements Comparable<WikiLink> {

    public static String URL_HEAD = "http://en.wikipedia.org/wiki/";
    public static String STRING_SPLITTER = "href=" + "\"" + "/wiki/";
    private String pageTitle;
    private URL url;
    private long pageVC = 0;

    public WikiLink(String pageTitle) {
        this.pageTitle = pageTitle;
        pageTitle = pageTitle.replace(" ", "_");//XXX should this be switched?
        try {
            url = new URL(URL_HEAD + pageTitle);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        pageVC = -1;
    }

    public WikiLink(String pageTitle, URL url) {
        this.pageTitle = pageTitle;
        this.url = url;
        pageVC = -1;
    }

    public String getTitle() {
        return pageTitle;
    }

    public URL getURL() {
        return url;
    }

    @Override
    public String toString() {
        return pageTitle + ": " + pageVC + "\t" + " \t@\t " + url.toString();
    }

    public long getPageVC() {
        return pageVC;
    }

    public void setPageVC(long l) {
        pageVC = l;
    }

    @Override
    public int compareTo(WikiLink wikiLink) {
        if (this.pageVC < wikiLink.pageVC) {
            return -1;
        } else if (this.pageVC == wikiLink.pageVC) {
            return 0;
        } else if (this.pageVC > wikiLink.pageVC) {
            return 1;
        } else {
            return 2;
        }
    }
}


Node-path: trunk/WikiWeb/src/WikiLinkGroup.java
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1410
Text-content-md5: 3f13b41e691065a3b4f8090c5e62a75d
Text-content-sha1: 6f0fdc2933e96616bbd6d2222e4a7c5d87f0a961
Content-length: 1420

PROPS-END
import javax.swing.*;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Collections;

public class WikiLinkGroup {
    private ArrayList<WikiLink> wikiLinks;
    private String initialInput;
    private int n;

    public WikiLinkGroup(String initialInput, int n) {
        wikiLinks = new ArrayList<WikiLink>();
        this.initialInput = initialInput;
        this.n = n;
    }

    public void add(WikiLink wl) {
        wikiLinks.add(wl);
        Collections.sort(wikiLinks);
    }

    public void paint(Graphics g, JPanel jp) {
        double theta = (Math.PI * 2) / (double) n;
        double radius = (jp.getHeight() / 2) - 100;
        int length = (n < wikiLinks.size()) ? n : wikiLinks.size();
        double xOrigin = jp.getWidth() / 2;
        double yOrigin = jp.getHeight() / 2;

        for (int i = 0; i < length; i++) {
            double modTheta = (theta * (double) i) + (Math.PI / 2);
            FontMetrics f = g.getFontMetrics();
            Rectangle2D rect = f.getStringBounds(wikiLinks.get(i).getTitle(), g);
            double _x = xOrigin - (radius * Math.cos(modTheta));
            double _y = yOrigin - (radius * Math.sin(modTheta));

            double x = _x - (rect.getWidth() / 2);
            double y = _y - (rect.getHeight() / 2);
            g.drawString(wikiLinks.get(i).getTitle(), (int) x, (int) y);
        }
    }
}


Node-path: trunk/WikiWeb/src/WikiSearch.java
Node-kind: file
Node-action: change
Text-content-length: 2108
Text-content-md5: 4d7f212693c0c5bf5fd938bb7b6dd766
Text-content-sha1: b220d7db769021dbc15aa8e994c1e193dae840f5
Content-length: 2108

/**
 * @author Parth Mehrotra
 */

import java.util.ArrayList;

public class WikiSearch extends WikiLink {

    private RelevantLinks relaventLinks;
    private WikiFilter filter;
    private DownloadStatisticProvider dsp;
    private ResultFound resultFound;

    public WikiSearch(String pageTitle, DownloadStatisticProvider dsp) throws Exception {
        super(pageTitle);
        this.dsp = dsp;
        relaventLinks = new RelevantLinks(super.getURL(), dsp);
    }


    public WikiSearch(String pageTitle, WikiFilter filter, DownloadStatisticProvider dsp) throws Exception {
        super(pageTitle);
        this.dsp = dsp;
        this.filter = filter;
        relaventLinks = new RelevantLinks(super.getURL(), dsp);
    }

    public void attachResultsFound(ResultFound resultFound) {
        this.resultFound = resultFound;
    }

    public ArrayList<WikiLink> getFilteredWikipediaLinks() throws Exception {
        ArrayList<WikiLink> unfilteredList = getUnFilteredWikipediaLinks().getWikipediaLinks();
        ArrayList<WikiLink> filteredList = new ArrayList<WikiLink>();


        if (filter.getFilters().size() < 1) {
            return unfilteredList; // TODO Move this up and call the method instead, avoid creating unn objs.
        }

        for (int i = 0; i < unfilteredList.size(); i++) {
            boolean add = true;
            for (int j = 0; j < filter.getFilters().size(); j++) {
                if (unfilteredList.get(i).getTitle().contains(filter.getFilters().get(j))) {
                    add = false;
                }
            }
            if (add) {
                WikiLink wikiLink = unfilteredList.get(i);
                wikiLink.setPageVC(dsp.getPageView(wikiLink.getTitle()));
                filteredList.add(wikiLink);
                if (resultFound != null) {
                    resultFound.resultFound(wikiLink);
                }
            }
        }

        return filteredList;

    }

    public RelevantLinks getUnFilteredWikipediaLinks() {
        return relaventLinks;
    }
}


Node-path: trunk/WikiWeb/src/WikiWebLauncher.java
Node-kind: file
Node-action: change
Text-content-length: 912
Text-content-md5: 2f49c575316e413c76dcc50f0a0e972d
Text-content-sha1: 530ea47c5144518baebcba084ba99c7f053251ae
Content-length: 912

import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class WikiWebLauncher extends JFrame implements KeyListener {

    private WikiWebVisualizer wikiWebVisualizer;

    public WikiWebLauncher() throws Exception {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        wikiWebVisualizer = new WikiWebVisualizer();
        addKeyListener(this);
        wikiWebVisualizer.addKeyListener(this);
        add(wikiWebVisualizer);
        setVisible(true);
    }

    public static void main(String[] args) throws Exception {
        new WikiWebLauncher();
    }

    @Override
    public void keyTyped(KeyEvent keyEvent) {
        wikiWebVisualizer.keyTyped(keyEvent);
    }

    @Override
    public void keyPressed(KeyEvent keyEvent) {
    }

    @Override
    public void keyReleased(KeyEvent keyEvent) {
    }
}


Node-path: trunk/WikiWeb/src/WikiWebVisualizer.java
Node-kind: file
Node-action: change
Text-content-length: 8259
Text-content-md5: 7d8efd53f56663738eb9a4a6a3f66761
Text-content-sha1: 896a8f5b142b2b8f98d66a4606134594efc6bf7e
Content-length: 8259

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class WikiWebVisualizer extends JPanel {

    private static final int DOWNLOAD = 0;
    private static final int QUERY_INPUT = 1;
    private static final int QUERY_TRANSITION = 2;
    private static final int QUERY_DISPLAY = 3;
    private static final String OVERALL_STRING = "Overall Progress";
    private static final String INITIAL_PROMPT = "Enter a Query: ";
    private Thread dataRetrievalThread;
    private Thread query;
    private ProgressLine overall, task;
    private int mode;
    private String taskString = "Current Task";
    private WikiSearch wikiSearch;
    private String inputQuerySoFar;
    private DownloadStatisticProvider downloadStatisticProvider;
    private WikiLinkGroup wikiLinkGroup;

    public WikiWebVisualizer() throws Exception {
        int w = 200;
        int x = getWidth() - w / 2;
        int y1 = getHeight() - 50;
        int y2 = getHeight() + 50;

        overall = new ProgressLine(Color.WHITE, Color.RED);
        task = new ProgressLine(Color.WHITE, Color.RED);

        dataRetrievalThread = new Thread(new Runnable() {
            @Override
            public void run() {
                inputQuerySoFar = INITIAL_PROMPT;

                try {
                    final DownloadStatisticProvider
                            dsp = new DownloadStatisticProvider();

                    dsp.attachDownloadUpdater(new DownloadUpdater() {
                        @Override
                        public void downloadStarted() {
                        }

                        @Override
                        public void setOverallStatus(double status) {
                            overall.setStatus(status);
                            repaint();
                        }

                        @Override
                        public void setDownloadStatus(double status) {
                            taskString = "Download data file from MediaWiki";
                            task.setStatus(status);
                            repaint();
                        }

                        @Override
                        public void setUnzipStatus(double status) {
                            taskString = "Unzipping the file";
                            task.setStatus(status);
                            repaint();
                        }

                        @Override
                        public void setReWriteStatus(double status) {
                            taskString = "Extracting english portions";
                            task.setStatus(status);
                            repaint();
                        }

                        @Override
                        public void downloadFinished() {
                        }

                        @Override
                        public void downloadUnnessisary() {
                        }

                        @Override
                        public void unzipUnnessisary() {
                        }

                        @Override
                        public void reWriteUnnessisary() {
                        }

                        @Override
                        public void processStarted() {
                            mode = DOWNLOAD;
                            repaint();
                        }

                        @Override
                        public void processFinished() {
                            mode = QUERY_INPUT;
                            repaint();
                            setDownloadStatistics(dsp);
                        }

                        @Override
                        public void downloadRequired() {
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
            }

        });
        dataRetrievalThread.start();

        query = new Thread(new Runnable() {
            @Override
            public void run() {
                String input = inputQuerySoFar.replace(INITIAL_PROMPT, "");
                wikiLinkGroup = new WikiLinkGroup(input, 10);
                try {
                    WikiSearch
                            search = new WikiSearch(input,
                            new WikiFilter(addFilters()), downloadStatisticProvider);
                    search.attachResultsFound(new ResultFound() {
                        @Override
                        public void resultFound(WikiLink result) {
                            mode = QUERY_DISPLAY;
                            wikiLinkGroup.add(result);
                            repaint();
                        }
                    });
                    search.getFilteredWikipediaLinks();
                } catch (Exception e) {
                }
            }
        });
    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString
                .add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        filterString.add("Talk:");
        filterString.add("Wikipedia:");
        filterString.add("internal");
        filterString.add("This article is ");
        return filterString;
    }

    public void setDownloadStatistics(DownloadStatisticProvider dsp) {
        this.downloadStatisticProvider = dsp;
    }

    public void keyTyped(KeyEvent keyEvent) {
        if (mode == QUERY_INPUT) {
            if ((int) keyEvent.getKeyChar() == 8) {
                if (inputQuerySoFar.length() > INITIAL_PROMPT.length()) {
                    inputQuerySoFar = inputQuerySoFar.substring(0, inputQuerySoFar.length() - 1);
                }
            } else if (keyEvent.getKeyChar() == '\n') {
                mode = QUERY_TRANSITION;
                doQuery();
            } else {
                inputQuerySoFar += keyEvent.getKeyChar();
            }
        }
        repaint();
    }

    public void doQuery() {
        query.start();
    }

    @Override
    public void paint(Graphics g) {
        if (mode == DOWNLOAD) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());

            int w = 500;
            int x = (getWidth() / 2) - (w / 2);
            int y1 = getHeight() / 2 - 50;
            int y2 = getHeight() / 2 + 50;

            overall.setDim(x, y1, w);
            task.setDim(x, y2, w);

            overall.paint(g);
            task.paint(g);

            g.setColor(Color.WHITE);
            g.drawString(taskString, x, y2 - 7);
            g.drawString(OVERALL_STRING, x, y1 - 7);
        } else if (mode == QUERY_INPUT) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());
            g.setColor(Color.WHITE);
            g.drawString(inputQuerySoFar, 0, 0 + 15);
        } else if (mode == QUERY_DISPLAY) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());
            g.setColor(Color.WHITE);
            wikiLinkGroup.paint(g, this);
        }
    }
}


Revision-number: 45
Prop-content-length: 145
Content-length: 145

K 7
svn:log
V 36
Added some cool rectangles and lines
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-18T04:54:06.144131Z
PROPS-END

Node-path: trunk/WikiWeb/src/WikiLinkGroup.java
Node-kind: file
Node-action: change
Text-content-length: 2954
Text-content-md5: b7726436a5052b0691266adcef68d57b
Text-content-sha1: 85e4dde35fec8de473ba06cd243fbf1c730f8da7
Content-length: 2954

import javax.swing.*;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Collections;

public class WikiLinkGroup {
    public static final int PADDING = 5;
    private ArrayList<WikiLink> wikiLinks;
    private String initialInput;
    private int n;

    public WikiLinkGroup(String initialInput, int n) {
        wikiLinks = new ArrayList<WikiLink>();
        this.initialInput = initialInput;
        this.n = n;
    }

    public void add(WikiLink wl) {
        wikiLinks.add(wl);
        Collections.sort(wikiLinks);
    }

    public void paint(Graphics g, JPanel jp) {
        g.setColor(Color.WHITE);
        double theta = (Math.PI * 2) / (double) n;
        double radius = (jp.getHeight() / 2) - 100;
        int length = (n < wikiLinks.size()) ? n : wikiLinks.size();
        double xOrigin = jp.getWidth() / 2;
        double yOrigin = jp.getHeight() / 2;

        FontMetrics fm = g.getFontMetrics();
        Rectangle2D r = fm.getStringBounds(initialInput, g);

        g.drawString(initialInput, (int) (xOrigin - r.getWidth() / 2), (int) (yOrigin - r.getHeight() / 2));
        g.setColor(Color.GREEN);
        g.drawRect((int) (xOrigin - r.getWidth() / 2) - 3, (int) (yOrigin - (r.getHeight() + PADDING)) - 3, (int) r.getWidth() + PADDING, (int) r.getHeight() + PADDING);
        g.setColor(Color.WHITE);

        if (wikiLinks != null && wikiLinks.size() > 0) {
            for (int i = 0; i < length; i++) {
                double modTheta = (theta * (double) i) + (Math.PI / 2);
                FontMetrics f = g.getFontMetrics();
                Rectangle2D rect = f.getStringBounds(wikiLinks.get(i).getTitle(), g);
                double _x = xOrigin - (radius * Math.cos(modTheta));
                double _y = yOrigin - (radius * Math.sin(modTheta));

                double x = _x - (rect.getWidth() / 2);
                double y = _y - (rect.getHeight() / 2);
                g.setColor(Color.WHITE);
                g.drawString(wikiLinks.get(i).getTitle(), (int) x, (int) y);
                int rectX = (int) x - 3;
                int rectY = (int) y - (PADDING * 3);
                int rectW = (int) rect.getWidth() + PADDING;
                int rectH = (int) rect.getHeight() + PADDING;
                g.setColor(Color.GREEN);
                g.drawRect(rectX, rectY, rectW, rectH);
                int lineX2 = (int) ((((double) rectX) + ((double) rectX + (double) rectW)) / 2);
                int lineY2 = (int) ((((double) rectY) + ((double) rectY + (double) rectH)) / 2);
                double rad = Math.sqrt(Math.pow(r.getWidth() / 2, 2) + Math.pow(r.getHeight() / 2, 2)) + 1d;
                int lineX1 = (int) (xOrigin - (Math.cos(modTheta) * rad));
                int lineY1 = (int) (yOrigin - (Math.sin(modTheta) * rad));


                g.setColor(Color.GRAY);
                g.drawLine(lineX1, lineY1, lineX2, lineY2);
            }
        }
    }
}


Node-path: trunk/WikiWeb/src/WikiWebVisualizer.java
Node-kind: file
Node-action: change
Text-content-length: 8274
Text-content-md5: 1c0ec6b720d852eb43c723e281f6269a
Text-content-sha1: b285a34903a19302e2b021eb5f22a6a2a98175cf
Content-length: 8274

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class WikiWebVisualizer extends JPanel {

    private static final int DOWNLOAD = 0;
    private static final int QUERY_INPUT = 1;
    private static final int QUERY_TRANSITION = 2;
    private static final int QUERY_DISPLAY = 3;
    private static final String OVERALL_STRING = "Overall Progress";
    private static final String INITIAL_PROMPT = "Enter a Query: ";
    private Thread dataRetrievalThread;
    private Thread query;
    private ProgressLine overall, task;
    private int mode;
    private String taskString = "Current Task";
    private WikiSearch wikiSearch;
    private String inputQuerySoFar;
    private DownloadStatisticProvider downloadStatisticProvider;
    private WikiLinkGroup wikiLinkGroup;

    public WikiWebVisualizer() throws Exception {
        int w = 200;
        int x = getWidth() - w / 2;
        int y1 = getHeight() - 50;
        int y2 = getHeight() + 50;

        overall = new ProgressLine(Color.WHITE, Color.RED);
        task = new ProgressLine(Color.WHITE, Color.RED);

        dataRetrievalThread = new Thread(new Runnable() {
            @Override
            public void run() {
                inputQuerySoFar = INITIAL_PROMPT;

                try {
                    final DownloadStatisticProvider
                            dsp = new DownloadStatisticProvider();

                    dsp.attachDownloadUpdater(new DownloadUpdater() {
                        @Override
                        public void downloadStarted() {
                        }

                        @Override
                        public void setOverallStatus(double status) {
                            overall.setStatus(status);
                            repaint();
                        }

                        @Override
                        public void setDownloadStatus(double status) {
                            taskString = "Download data file from MediaWiki";
                            task.setStatus(status);
                            repaint();
                        }

                        @Override
                        public void setUnzipStatus(double status) {
                            taskString = "Unzipping the file";
                            task.setStatus(status);
                            repaint();
                        }

                        @Override
                        public void setReWriteStatus(double status) {
                            taskString = "Extracting english portions";
                            task.setStatus(status);
                            repaint();
                        }

                        @Override
                        public void downloadFinished() {
                        }

                        @Override
                        public void downloadUnnessisary() {
                        }

                        @Override
                        public void unzipUnnessisary() {
                        }

                        @Override
                        public void reWriteUnnessisary() {
                        }

                        @Override
                        public void processStarted() {
                            mode = DOWNLOAD;
                            repaint();
                        }

                        @Override
                        public void processFinished() {
                            mode = QUERY_INPUT;
                            repaint();
                            setDownloadStatistics(dsp);
                        }

                        @Override
                        public void downloadRequired() {
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
            }

        });
        dataRetrievalThread.start();

        query = new Thread(new Runnable() {
            @Override
            public void run() {
                String input = inputQuerySoFar.replace(INITIAL_PROMPT, "");
                wikiLinkGroup = new WikiLinkGroup(input, 10);
                mode = QUERY_DISPLAY;
                repaint();
                try {
                    WikiSearch
                            search = new WikiSearch(input,
                            new WikiFilter(addFilters()), downloadStatisticProvider);
                    search.attachResultsFound(new ResultFound() {
                        @Override
                        public void resultFound(WikiLink result) {
                            wikiLinkGroup.add(result);
                            repaint();
                        }
                    });
                    search.getFilteredWikipediaLinks();
                } catch (Exception e) {
                }
            }
        });
    }

    public static ArrayList<String> addFilters() {
        ArrayList<String> filterString = new ArrayList<String>();
        filterString.add("File:");
        filterString.add("image");
        filterString.add("Book:");
        filterString.add("Category:");
        filterString.add("Portal:");
        filterString.add("Help:");
        filterString.add("Discussion about the content page");
        filterString.add("Visit the main page");
        filterString.add("Guides to browsing Wikipedia");
        filterString.add("Featured content – the best of Wikipedia");
        filterString.add("Find background information on current events");
        filterString.add("Load a random article");
        filterString.add("Guidance on how to use and edit Wikipedia");
        filterString.add("Find out about Wikipedia");
        filterString.add("About the project");
        filterString
                .add("List of all English Wikipedia pages containing links to this page");
        filterString.add("Recent changes in pages linked from this page");
        filterString.add("Upload files");
        filterString.add("A list of all special pages");
        filterString.add("Wikipedia:About");
        filterString.add("Wikipedia:General disclaimer");
        filterString.add("Talk:");
        filterString.add("Wikipedia:");
        filterString.add("internal");
        filterString.add("This article is ");
        return filterString;
    }

    public void setDownloadStatistics(DownloadStatisticProvider dsp) {
        this.downloadStatisticProvider = dsp;
    }

    public void keyTyped(KeyEvent keyEvent) {
        if (mode == QUERY_INPUT) {
            if ((int) keyEvent.getKeyChar() == 8) {
                if (inputQuerySoFar.length() > INITIAL_PROMPT.length()) {
                    inputQuerySoFar = inputQuerySoFar.substring(0, inputQuerySoFar.length() - 1);
                }
            } else if (keyEvent.getKeyChar() == '\n') {
                mode = QUERY_TRANSITION;
                doQuery();
            } else {
                inputQuerySoFar += keyEvent.getKeyChar();
            }
        }
        repaint();
    }

    public void doQuery() {
        query.start();
    }

    @Override
    public void paint(Graphics g) {
        if (mode == DOWNLOAD) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());

            int w = 500;
            int x = (getWidth() / 2) - (w / 2);
            int y1 = getHeight() / 2 - 50;
            int y2 = getHeight() / 2 + 50;

            overall.setDim(x, y1, w);
            task.setDim(x, y2, w);

            overall.paint(g);
            task.paint(g);

            g.setColor(Color.WHITE);
            g.drawString(taskString, x, y2 - 7);
            g.drawString(OVERALL_STRING, x, y1 - 7);
        } else if (mode == QUERY_INPUT) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());
            g.setColor(Color.WHITE);
            g.drawString(inputQuerySoFar, 0, 0 + 15);
        } else if (mode == QUERY_DISPLAY) {
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());
            g.setColor(Color.WHITE);
            wikiLinkGroup.paint(g, this);
        }
    }
}


Revision-number: 46
Prop-content-length: 129
Content-length: 129

K 7
svn:log
V 20
Adding Documentation
K 10
svn:author
V 13
parthmehrotra
K 8
svn:date
V 27
2013-06-18T15:09:01.599071Z
PROPS-END

Node-path: trunk/WikiWeb/src/DownloadStatisticProvider.java
Node-kind: file
Node-action: change
Text-content-length: 8064
Text-content-md5: 59c678e6c2aaf96b34a4c78697ba2f24
Text-content-sha1: 67b3de582fed0a7d1a27d9a1001af95af4b2853f
Content-length: 8064

/**
 * @author Parth Mehrotra
 */

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

/**
 * DownloadStatisticProvide is in charge of going to the MediaWiki dumps and getting the files that contain download information.
 *
 * Problems: Linear search NEEDS to be replaced with a binary search
 */
public class DownloadStatisticProvider implements Statistic {

    private long downloadedTextFileSize;
    private File unzippedFile, zippedFile, finalEnglishQueryFile;
    private String[] downloadURLInfo;
    private DownloadUpdater downloadUpdater;
    private double overallStatus;

    public DownloadStatisticProvider() throws Exception {

//        downloadURLInfo = getMostRecentName();
        String fileWOExtension = downloadURLInfo[3].replace(".gz", "");
        zippedFile = new File(fileWOExtension + ".gz");
        unzippedFile = new File(fileWOExtension);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
        System.out.println("Created");

    }

    private static ArrayList<String> getOccurancesInHtml(URL url, String spl)
            throws Exception {
        URLConnection con = url.openConnection();
        con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
        Thread.sleep(1000);
        BufferedReader allHtml = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
        String now;
        ArrayList<String> lines = new ArrayList<String>();

        while ((now = allHtml.readLine()) != null) {
            if (now.contains(spl))
                lines.add(now);
        }
        ArrayList<String> split = new ArrayList<String>();
        for (int i = 0; i < lines.size(); i++) {
            String[] arr = lines.get(i).split(spl);
            for (int j = 1; j < arr.length; j++) {
                split.add(spl + arr[1]);
            }
        }
        return split;
    }

    private static String fixString(String string) {
        String s = string;
        s.replace("%20", " ");
        s.replace("%27", "'");
        s.replace(" ", "");
        return s;
    }

    public void attachDownloadUpdater(DownloadUpdater downloadUpdater) {
        this.downloadUpdater = downloadUpdater;
        downloadUpdater.processStarted();
        System.out.println("Started");
        try {
            prep();
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        downloadUpdater.processFinished();
    }

    public long getSize() {
        return downloadedTextFileSize;
    }

    @Override
    public boolean existingWord(String wordToCheck) throws Exception {
        return getPageView(wordToCheck) >= 0;
    }

    @Override
    public long getPageView(String wl) throws Exception {
        wl = wl.replace(" ", "_");
        BufferedReader br = new BufferedReader(new FileReader(finalEnglishQueryFile));
        String line;
        long num = 0;
        while ((line = br.readLine()) != null) {
            line = fixString(line);
            String[] data = line.split(" ");
            if (data[0].equals("en") && data[1].equalsIgnoreCase(wl)) {
                num += Integer.parseInt(data[2]);
            }
        }
        return num;
    }

    private String[] getMostRecentName() throws Exception {
        String root = "http://dumps.wikimedia.org/other/pagecounts-raw/";
        URL stepOne = new URL(root);
        ArrayList<String> last = getOccurancesInHtml(stepOne, "href=\"2");

        String year = last.get(last.size() - 1).split("\"")[1] + "/";

        URL stepTwo = new URL(root + year);
        ArrayList<String> yearPage = getOccurancesInHtml(stepTwo, "href=\"2");
        String hour = yearPage.get(yearPage.size() - 1).split("\"")[1] + "/";

        URL stepThree = new URL(root + year + hour);
        ArrayList<String> filePage = getOccurancesInHtml(stepThree,
                "href=\"pagecounts");
        return new String[]{root, year, hour, (filePage.get(filePage.size() - 1).split("\"")[1])};
    }

    @Override
    public void prep() throws Exception {
        BufferedReader br;
        URL theFileToBeDownloaded = new URL(downloadURLInfo[0] + downloadURLInfo[1] + downloadURLInfo[2] + downloadURLInfo[3]);
        if (!zippedFile.exists()) {
            InputStream in = null;
            OutputStream out = null;
            URLConnection con = null;

            out = new BufferedOutputStream(new FileOutputStream(zippedFile));
            con = theFileToBeDownloaded.openConnection();
            con.addRequestProperty("User-agent", "Mozilla/2.0.0.11");
            in = con.getInputStream();
            long length = Long.parseLong(con.getHeaderFields()
                    .get("Content-Length").get(0));

            byte[] buffer = new byte[1024];

            int numRead;
            long numWritten = 0;

            downloadUpdater.downloadStarted();
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                downloadUpdater.setDownloadStatus((double) numWritten / (double) length);
                overallStatus = ((double) numWritten / (double) length);
                downloadUpdater.setOverallStatus(overallStatus * (1d / 3d));
                numWritten += numRead;
            }

            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            downloadUpdater.downloadFinished();
        } else {
            downloadUpdater.downloadUnnessisary();
        }

        downloadUpdater.setOverallStatus(overallStatus);
        if (!unzippedFile.exists()) {

            GZIPInputStream gzipInputStream = new GZIPInputStream(
                    new FileInputStream(zippedFile));
            FileOutputStream fileOutputStream = new FileOutputStream(
                    unzippedFile);

            int len;
            byte[] zipBuffer = new byte[1024];

            overallStatus = 0.5;

            while ((len = gzipInputStream.read(zipBuffer)) != -1) {
                fileOutputStream.write(zipBuffer, 0, len);
                downloadUpdater.setUnzipStatus(.50);
                downloadUpdater.setOverallStatus(overallStatus);
            }
            gzipInputStream.close();
            fileOutputStream.close();
        } else {
            downloadUpdater.unzipUnnessisary();
        }

        overallStatus = (2d / 3d);
        downloadUpdater.setOverallStatus(overallStatus);

        LineNumberReader lnr = new LineNumberReader(new FileReader(unzippedFile));
        lnr.skip(Long.MAX_VALUE);
        downloadedTextFileSize = lnr.getLineNumber();

        double rStatus;

        if (!finalEnglishQueryFile.exists()) {
            br = new BufferedReader(new FileReader(unzippedFile));
            FileOutputStream finalEnglishFile = new FileOutputStream("en-"
                    + unzippedFile.toString());
            int j = 0;
            for (String line = br.readLine(); line != null; line = br
                    .readLine()) {
                String[] data = line.split(" ");
                if (data[0].equals("en")) {
                    line += "\n";
                    finalEnglishFile.write(line.getBytes());
                }
                rStatus = ((double) j++ / (double) downloadedTextFileSize);
                downloadUpdater.setReWriteStatus(rStatus);
                downloadUpdater.setOverallStatus(overallStatus + (rStatus * (1d / 3d)));
            }
            finalEnglishFile.close();
        } else {
            downloadUpdater.reWriteUnnessisary();
        }
        downloadUpdater.setOverallStatus(1d);
        finalEnglishQueryFile = new File("en-" + unzippedFile.toString());
    }
}

Node-path: trunk/WikiWeb/src/DownloadUpdater.java
Node-kind: file
Node-action: change
Text-content-length: 648
Text-content-md5: 3da894385154cbacacf5c78f5868681b
Text-content-sha1: 6c7fa33d4c80550a2a1295cb82d07e525e434ea5
Content-length: 648

/**
 * @author Parth Mehrotra
 * DownloadUpdater informs client classs about what's going on with the download
 */
public interface DownloadUpdater {
    public void downloadStarted();

    public void setOverallStatus(double status);

    public void setDownloadStatus(double status);

    public void setUnzipStatus(double status);

    public void setReWriteStatus(double status);

    public void downloadFinished();

    public void downloadUnnessisary();

    public void unzipUnnessisary();

    public void reWriteUnnessisary();

    public void processStarted();

    public void processFinished();

    public void downloadRequired();

}


Node-path: trunk/WikiWeb/src/ProgressLine.java
Node-kind: file
Node-action: change
Text-content-length: 1143
Text-content-md5: 6f464a2444b3c334722d14e2c3326bbf
Text-content-sha1: 3ee87a2d441d00490d5967d2ee381ce84e9b5afa
Content-length: 1143

import java.awt.*;

/**
 * @author Parth Mehrotra
 * ProgressLine is a simple progress updater
 */
public class ProgressLine {

    private double status;
    private Color innerColor;
    private Color frameColor;
    private int x, y, w;

    public ProgressLine(Color innerColor, Color frameColor) {
        this.innerColor = innerColor;
        this.frameColor = frameColor;
    }

    public ProgressLine(Color innerColor, Color frameColor, int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.innerColor = innerColor;
        this.frameColor = frameColor;
    }

    public void setDim(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }

    public void paint(Graphics g) {
        Color before = g.getColor();
        g.setColor(frameColor);
        g.drawRect(x, y, w, 5);
        g.setColor(innerColor);
        g.fillRect(x+2, y+2, (int) (status * w) - 4, 2);

        g.setColor(before);
    }

    public void setStatus(double status) {
        this.status = status;
    }

    public double getStatus(double status) {
        return status;
    }
}


Node-path: trunk/WikiWeb/src/ResultFound.java
Node-kind: file
Node-action: change
Text-content-length: 116
Text-content-md5: c142d39a2c15f12db8e42898cc6abaa9
Text-content-sha1: 79d85250457a83c4184cd321d9eebe58c50b5736
Content-length: 116

/**
 * @author Parth Mehrotra
 *
 */
public interface ResultFound {
    public void resultFound(WikiLink result);
}


Node-path: trunk/WikiWeb/src/WikiWebLauncher.java
Node-kind: file
Node-action: change
Text-content-length: 944
Text-content-md5: b838ae0943d61461f045005bd2a81ead
Text-content-sha1: 83d82a61e88f3143f785ff281955aaa35d200713
Content-length: 944

import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class WikiWebLauncher extends JFrame implements KeyListener {

    private WikiWebVisualizer wikiWebVisualizer;

    public WikiWebLauncher() throws Exception {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
//        setUndecorated(true);
        wikiWebVisualizer = new WikiWebVisualizer();
        addKeyListener(this);
        wikiWebVisualizer.addKeyListener(this);
        add(wikiWebVisualizer);
        setVisible(true);
    }

    public static void main(String[] args) throws Exception {
        new WikiWebLauncher();
    }

    @Override
    public void keyTyped(KeyEvent keyEvent) {
        wikiWebVisualizer.keyTyped(keyEvent);
    }

    @Override
    public void keyPressed(KeyEvent keyEvent) {
    }

    @Override
    public void keyReleased(KeyEvent keyEvent) {
    }
}


